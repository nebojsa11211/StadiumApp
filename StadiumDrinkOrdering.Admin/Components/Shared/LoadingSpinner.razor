@if (IsVisible)
{
    <div class="loading-container @(Overlay ? "loading-overlay" : "")">
        <div class="loading-spinner @Size.ToLower()">
            <div class="spinner-inner">
                <div class="spinner-circle"></div>
                <div class="spinner-circle"></div>
                <div class="spinner-circle"></div>
            </div>
            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="loading-message">@Message</div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public bool Overlay { get; set; } = false;
    [Parameter] public string Size { get; set; } = "Medium"; // Small, Medium, Large
    [Parameter] public string Message { get; set; } = "";
    [Parameter] public string Color { get; set; } = "primary"; // primary, success, warning, danger
}

<style>
    .loading-container {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        gap: 1rem;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(4px);
        z-index: 9999;
        animation: fadeIn 0.2s ease-in;
    }

    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .spinner-inner {
        display: flex;
        gap: 0.25rem;
        align-items: center;
    }

    .spinner-circle {
        width: 12px;
        height: 12px;
        background: var(--stadium-primary);
        border-radius: 50%;
        animation: bounce-loading 1.4s infinite ease-in-out both;
    }

    .spinner-circle:nth-child(1) {
        animation-delay: -0.32s;
    }

    .spinner-circle:nth-child(2) {
        animation-delay: -0.16s;
    }

    .loading-spinner.small .spinner-circle {
        width: 8px;
        height: 8px;
    }

    .loading-spinner.large .spinner-circle {
        width: 16px;
        height: 16px;
    }

    @@keyframes bounce-loading {
        0%, 80%, 100% {
            transform: scale(0);
            opacity: 0.5;
        }
        40% {
            transform: scale(1);
            opacity: 1;
        }
    }

    .loading-message {
        font-size: 0.875rem;
        color: var(--stadium-gray-600);
        font-weight: 500;
        text-align: center;
        animation: pulse 2s infinite;
    }

    .loading-spinner.small .loading-message {
        font-size: 0.8125rem;
    }

    .loading-spinner.large .loading-message {
        font-size: 1rem;
    }

    /* Color variants */
    .loading-spinner[data-color="success"] .spinner-circle {
        background: var(--stadium-success);
    }

    .loading-spinner[data-color="warning"] .spinner-circle {
        background: var(--stadium-warning);
    }

    .loading-spinner[data-color="danger"] .spinner-circle {
        background: var(--stadium-danger);
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    /* Mobile optimizations */
    @@media (max-width: 768px) {
        .loading-spinner {
            gap: 0.75rem;
        }

        .loading-message {
            font-size: 0.8125rem;
            padding: 0 1rem;
        }
    }
</style>