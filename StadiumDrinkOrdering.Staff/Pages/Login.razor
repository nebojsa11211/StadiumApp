@page "/login"
@layout AuthLayout
@inject IStaffApiService ApiService
@inject IAuthStateService AuthService
@inject NavigationManager Navigation

<PageTitle>Staff Login</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-4">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Staff Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" id="email" placeholder="Enter your email" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText @bind-Value="loginModel.Password" type="password" class="form-control" id="password" placeholder="Enter your password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @errorMessage
                            </div>
                        }
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading" id="staff-login-submit-btn">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                Sign In
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
            
            <div class="mt-3 text-center">
                <small class="text-muted">
                    Staff access only. Use your assigned credentials.
                </small>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginDto loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private string? returnUrl;

    protected override void OnInitialized()
    {
        // Check if user is already authenticated
        if (AuthService.IsAuthenticated)
        {
            NavigateToReturnUrl();
            return;
        }

        // Get return URL from query string
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        returnUrl = query["returnUrl"];
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            var response = await ApiService.LoginAsync(loginModel);
            
            if (response?.Token != null)
            {
                await AuthService.LoginAsync(response.Token, loginModel.Email);
                await ApiService.LogUserActionAsync("StaffLogin", "Authentication", $"Staff user {loginModel.Email} logged in successfully");
                NavigateToReturnUrl();
            }
            else
            {
                errorMessage = "Invalid email or password. Please try again.";
                await ApiService.LogUserActionAsync("StaffLoginFailed", "Authentication", $"Failed login attempt for {loginModel.Email}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
            await ApiService.LogUserActionAsync("StaffLoginError", "Authentication", $"Login error for {loginModel.Email}: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToReturnUrl()
    {
        var targetUrl = "/";
        
        if (!string.IsNullOrEmpty(returnUrl))
        {
            try
            {
                targetUrl = Uri.UnescapeDataString(returnUrl);
                // Ensure it's a relative URL for security
                if (targetUrl.StartsWith("http"))
                {
                    targetUrl = "/";
                }
            }
            catch
            {
                targetUrl = "/";
            }
        }

        Navigation.NavigateTo(targetUrl, forceLoad: true);
    }
}