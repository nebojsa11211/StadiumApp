@page "/test-notifications"
@inject StadiumDrinkOrdering.Admin.Services.ErrorHandling.IErrorNotificationService ErrorService
@inject IJSRuntime JSRuntime

<PageTitle>Test Notifications</PageTitle>

<h3>üß™ Test Error Notifications</h3>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5>Error Notification Tests</h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <button class="btn btn-danger" @onclick="TestErrorNotification" id="admin-test-notifications-error-btn">
                        üö® Test Error Notification
                    </button>

                    <button class="btn btn-warning" @onclick="TestTimeoutNotification" id="admin-test-notifications-timeout-btn">
                        ‚è±Ô∏è Test Timeout Notification
                    </button>

                    <button class="btn btn-info" @onclick="TestApiErrorNotification" id="admin-test-notifications-api-error-btn">
                        üåê Test API Error (400 Bad Request)
                    </button>

                    <button class="btn btn-secondary" @onclick="TestJavaScriptDirect" id="admin-test-notifications-js-direct-btn">
                        üì± Test JavaScript Direct
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private async Task TestErrorNotification()
    {
        await ErrorService.ShowErrorAsync("This is a test error message!", "Test Error");
    }

    private async Task TestTimeoutNotification()
    {
        await ErrorService.ShowErrorAsync(
            "‚è±Ô∏è The request is taking longer than expected. Please try again.",
            "Request Timeout"
        );
    }

    private async Task TestApiErrorNotification()
    {
        await ErrorService.ShowApiErrorAsync(System.Net.HttpStatusCode.BadRequest, "Test details", "/test/endpoint");
    }

    private async Task TestJavaScriptDirect()
    {
        try
        {
            // Test the exact same call that ErrorNotificationService makes
            await JSRuntime.InvokeVoidAsync("notificationManager.showToast",
                "error",
                "Direct JavaScript test message",
                "JavaScript Test",
                5000);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"JavaScript test failed: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"JavaScript test failed: {ex.Message}");
        }
    }
}