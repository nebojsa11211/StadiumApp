@page "/bartender"
@using StadiumDrinkOrdering.Shared.Models

<PageTitle>Bartender Dashboard</PageTitle>
    
    <!-- Animated gradient background -->
    <div class="stadium-bg-animation" id="bartender-bg-animation"></div>
    
    <!-- Floating particles -->
    <div class="particles" id="particles"></div>

    <div class="stadium-container" id="bartender-container">
        <div class="stadium-card" id="bartender-card">
            <div class="header" id="bartender-header">
                <h1 id="bartender-title">ARENA 2025</h1>
                <p class="subtitle" id="bartender-subtitle">Stadium Drink Ordering ‚Ä¢ Real-time Dashboard</p>
            </div>
            
            <div class="dashboard-grid" id="bartender-dashboard-grid">
                <div class="stadium-section" id="bartender-stadium-section">
                    <div class="section-header" id="bartender-stadium-header">
                        <h3 id="bartender-stadium-title">üèüÔ∏è Stadium Map</h3>
                        <button class="btn-refresh" @onclick="RefreshData" id="bartender-refresh-btn">
                            <span class="refresh-icon" id="bartender-refresh-icon">üîÑ</span> Refresh
                        </button>
                    </div>
                    <div class="stadium-content" id="bartender-stadium-content">
                        @if (stadiumLayout == null)
                        {
                            <div class="loading-container" id="bartender-stadium-loading">
                                <div class="loading-spinner" id="bartender-stadium-spinner"></div>
                                <p id="bartender-stadium-loading-text">Loading stadium layout...</p>
                            </div>
                        }
                        else
                        {
                            <!-- Modern Legend -->
                            <div class="legend" id="bartender-legend">
                                <div class="legend-item" id="bartender-legend-available">
                                    <div class="legend-box available" id="bartender-legend-box-available"></div>
                                    <span id="bartender-legend-text-available">Available</span>
                                </div>
                                <div class="legend-item" id="bartender-legend-pending">
                                    <div class="legend-box pending" id="bartender-legend-box-pending"></div>
                                    <span id="bartender-legend-text-pending">Pending</span>
                                </div>
                                <div class="legend-item" id="bartender-legend-accepted">
                                    <div class="legend-box accepted" id="bartender-legend-box-accepted"></div>
                                    <span id="bartender-legend-text-accepted">Accepted</span>
                                </div>
                                <div class="legend-item" id="bartender-legend-preparing">
                                    <div class="legend-box preparing" id="bartender-legend-box-preparing"></div>
                                    <span id="bartender-legend-text-preparing">Preparing</span>
                                </div>
                                <div class="legend-item" id="bartender-legend-ready">
                                    <div class="legend-box ready" id="bartender-legend-box-ready"></div>
                                    <span id="bartender-legend-text-ready">Ready</span>
                                </div>
                            </div>

                            <div class="stadium-wrapper" id="bartender-stadium-wrapper">
                                <svg viewBox="0 0 800 600" class="stadium-svg" id="bartender-stadium-svg">
                                    <defs>
                                        <linearGradient id="fieldGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                            <stop offset="0%" style="stop-color:#10b981;stop-opacity:1" />
                                            <stop offset="100%" style="stop-color:#059669;stop-opacity:1" />
                                        </linearGradient>
                                        
                                        <linearGradient id="standGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                            <stop offset="0%" style="stop-color:#6366f1;stop-opacity:0.9" />
                                            <stop offset="100%" style="stop-color:#4f46e5;stop-opacity:0.9" />
                                        </linearGradient>
                                        
                                        <linearGradient id="selectedGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                            <stop offset="0%" style="stop-color:#ef4444;stop-opacity:1" />
                                            <stop offset="100%" style="stop-color:#dc2626;stop-opacity:1" />
                                        </linearGradient>
                                        
                                        <filter id="blur" x="-50%" y="-50%" width="200%" height="200%">
                                            <feGaussianBlur in="SourceGraphic" stdDeviation="0.5" />
                                        </filter>
                                        
                                        <filter id="seatGlow">
                                            <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
                                            <feMerge> 
                                                <feMergeNode in="coloredBlur"/>
                                                <feMergeNode in="SourceGraphic"/>
                                            </feMerge>
                                        </filter>
                                    </defs>

                                    <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
                                        <path d="M 40 0 L 0 0 0 40" fill="none" stroke="rgba(255,255,255,0.03)" stroke-width="1"/>
                                    </pattern>
                                    <rect width="800" height="600" fill="url(#grid)"/>
                                    
                                    <rect x="250" y="200" width="300" height="200" class="field" rx="8"/>
                                    
                                    <g class="field-lines">
                                        <line x1="400" y1="200" x2="400" y2="400"/>
                                        <circle cx="400" cy="300" r="30"/>
                                        <circle cx="400" cy="300" r="3" fill="white"/>
                                        <rect x="250" y="270" width="40" height="60"/>
                                        <rect x="250" y="285" width="20" height="30"/>
                                        <rect x="510" y="270" width="40" height="60"/>
                                        <rect x="530" y="285" width="20" height="30"/>
                                        <circle cx="280" cy="300" r="3" fill="white"/>
                                        <circle cx="520" cy="300" r="3" fill="white"/>
                                    </g>

                                    <g id="bartender-north-stand">
                                        <rect x="150" y="50" width="500" height="120" class="stand" data-stand="north" rx="15" id="bartender-north-stand-rect"/>
                                        <text x="400" y="115" class="stand-label" id="bartender-north-stand-label">NORTH</text>
                                    </g>
                                    
                                    <g id="bartender-south-stand">
                                        <rect x="150" y="430" width="500" height="120" class="stand" data-stand="south" rx="15" id="bartender-south-stand-rect"/>
                                        <text x="400" y="495" class="stand-label" id="bartender-south-stand-label">SOUTH</text>
                                    </g>
                                    
                                    <g id="bartender-east-stand">
                                        <rect x="680" y="100" width="100" height="400" class="stand" data-stand="east" rx="15" id="bartender-east-stand-rect"/>
                                        <text x="730" y="305" class="stand-label" transform="rotate(90 730 305)" id="bartender-east-stand-label">EAST</text>
                                    </g>
                                    
                                    <g id="bartender-west-stand">
                                        <rect x="20" y="100" width="100" height="400" class="stand" data-stand="west" rx="15" id="bartender-west-stand-rect"/>
                                        <text x="70" y="305" class="stand-label" transform="rotate(-90 70 305)" id="bartender-west-stand-label">WEST</text>
                                    </g>

                                    @foreach (var section in stadiumLayout.Sections)
                                    {
                                        <g class="stadium-section" id="@("bartender-section-" + section.SectionName)">
                                            @{
                                                var seatIndex = 0;
                                            }
                                            @foreach (var seat in section.Seats)
                                            {
                                                var coordinates = GetModernSeatCoordinates(section.SectionName, seatIndex, section.Seats.Count);
                                                <g class="seat" @onclick="() => SelectSeat(seat)" id="@($"bartender-seat-{seat.Id}")">
                                                    <rect x="@coordinates.X" y="@coordinates.Y" width="32" height="25" 
                                                          fill="@GetModernSeatColor(seat)" 
                                                          stroke="@GetModernSeatStroke(seat)" 
                                                          stroke-width="1.5" 
                                                          rx="3" 
                                                          class="@GetModernSeatClass(seat)"
                                                          id="@($"bartender-seat-rect-{seat.Id}")" />
                                                    <text x="@(coordinates.X + 16)" y="@(coordinates.Y + 16)" 
                                                          class="seat-text"
                                                          id="@($"bartender-seat-text-{seat.Id}")">@GetSeatLabel(seat)</text>
                                                </g>
                                                seatIndex++;
                                            }
                                        </g>
                                    }

                                </svg>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="orders-section" id="bartender-orders-section">
                    <div class="section-header" id="bartender-orders-header">
                        <h3 id="bartender-orders-title">üìã Order Queue</h3>
                    </div>
                    <div class="orders-content" id="bartender-orders-content">
                        @if (pendingOrders == null)
                        {
                            <div class="loading-container" id="bartender-orders-loading">
                                <div class="loading-spinner" id="bartender-orders-spinner"></div>
                                <p id="bartender-orders-loading-text">Loading orders...</p>
                            </div>
                        }
                        else if (!pendingOrders.Any())
                        {
                            <p class="no-orders" id="bartender-orders-empty">No pending orders</p>
                        }
                        else
                        {
                            <div class="order-list" id="bartender-order-list">
                                @foreach (var order in pendingOrders.OrderBy(o => o.CreatedAt))
                                {
                                    <div class="order-item" @onclick="() => SelectOrder(order)" id="bartender-order-item-@order.Id">
                                        <div class="order-header" id="bartender-order-header-@order.Id">
                                            <strong id="bartender-order-number-@order.Id">Order #@order.Id</strong>
                                            <span class="status-badge @GetStatusClass(order.Status)" id="bartender-order-status-@order.Id">
                                                @GetStatusText(order.Status)
                                            </span>
                                        </div>
                                        <div class="order-details" id="bartender-order-details-@order.Id">
                                            Seat: @order.SeatNumber | @order.CreatedAt.ToString("HH:mm")
                                        </div>
                                        <div class="order-items" id="bartender-order-items-@order.Id">
                                            @foreach (var item in order.OrderItems.Take(2))
                                            {
                                                <div class="item" id="bartender-order-item-detail-@item.Id-@order.Id">@item.Quantity√ó @item.DrinkName</div>
                                            }
                                            @if (order.OrderItems.Count > 2)
                                            {
                                                <div class="more-items" id="bartender-order-more-items-@order.Id">+@(order.OrderItems.Count - 2) more items</div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Modern Stats -->
            <div class="stats" id="bartender-stats">
                <div class="stat-item" id="bartender-stat-total-seats">
                    <div class="stat-value" id="bartender-stat-seats-value">@(stadiumLayout?.TotalSeats ?? 0)</div>
                    <div class="stat-label" id="bartender-stat-seats-label">Total Seats</div>
                </div>
                <div class="stat-item" id="bartender-stat-pending-orders">
                    <div class="stat-value" id="bartender-stat-pending-value">@(pendingOrders?.Count ?? 0)</div>
                    <div class="stat-label" id="bartender-stat-pending-label">Pending Orders</div>
                </div>
                <div class="stat-item" id="bartender-stat-active-orders">
                    <div class="stat-value" id="bartender-stat-active-value">@(activeOrders?.Count ?? 0)</div>
                    <div class="stat-label" id="bartender-stat-active-label">Active Orders</div>
                </div>
                <div class="stat-item" id="bartender-stat-total-orders">
                    <div class="stat-value" id="bartender-stat-total-value">@(stadiumLayout?.ActiveOrders ?? 0)</div>
                    <div class="stat-label" id="bartender-stat-total-label">Total Orders</div>
                </div>
            </div>
        </div>

        <!-- Order Details Modal -->
        @if (selectedOrder != null)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" id="bartender-order-modal">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content" id="bartender-order-modal-content">
                        <div class="modal-header" id="bartender-order-modal-header">
                            <h5 class="modal-title" id="bartender-order-modal-title">Order #@selectedOrder.Id - @selectedOrder.SeatNumber</h5>
                            <button type="button" class="btn-close" @onclick="CloseOrderDetails" id="bartender-order-modal-close-btn"></button>
                        </div>
                        <div class="modal-body" id="bartender-order-modal-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6 id="bartender-order-items-title">Order Items</h6>
                                    <table class="table table-sm" id="bartender-order-items-table">
                                        <thead>
                                            <tr>
                                                <th>Item</th>
                                                <th>Qty</th>
                                                <th>Price</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in selectedOrder.OrderItems)
                                            {
                                                <tr id="bartender-order-item-row-@item.Id">
                                                    <td>@item.DrinkName</td>
                                                    <td>@item.Quantity</td>
                                                    <td>$@item.TotalPrice.ToString("F2")</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <p id="bartender-order-total"><strong>Total: $@selectedOrder.TotalAmount.ToString("F2")</strong></p>
                                </div>
                                <div class="col-md-6">
                                    <h6 id="bartender-order-details-title">Order Details</h6>
                                    <p id="bartender-order-ticket"><strong>Ticket:</strong> @selectedOrder.TicketNumber</p>
                                    <p id="bartender-order-seat"><strong>Seat:</strong> @selectedOrder.SeatNumber</p>
                                    <p id="bartender-order-status-display"><strong>Status:</strong> <span class="badge @GetStatusBadgeClass(selectedOrder.Status)" id="bartender-order-status-badge">@GetStatusText(selectedOrder.Status)</span></p>
                                    <p id="bartender-order-created"><strong>Created:</strong> @selectedOrder.CreatedAt.ToString("g")</p>
                                    @if (!string.IsNullOrEmpty(selectedOrder.CustomerNotes))
                                    {
                                        <p id="bartender-order-notes"><strong>Notes:</strong> @selectedOrder.CustomerNotes</p>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer" id="bartender-order-modal-footer">
                            @if (selectedOrder.Status == OrderStatus.Pending)
                            {
                                <button class="btn btn-success" 
                                        @onclick="() => UpdateOrderStatus(selectedOrder.Id, OrderStatus.Accepted)"
                                        id="bartender-accept-order-@selectedOrder.Id-btn">
                                    Accept Order
                                </button>
                            }
                            else if (selectedOrder.Status == OrderStatus.Accepted)
                            {
                                <button class="btn btn-warning" 
                                        @onclick="() => UpdateOrderStatus(selectedOrder.Id, OrderStatus.InPreparation)"
                                        id="bartender-start-preparation-@selectedOrder.Id-btn">
                                    Start Preparation
                                </button>
                            }
                            else if (selectedOrder.Status == OrderStatus.InPreparation)
                            {
                                <button class="btn btn-info" 
                                        @onclick="() => UpdateOrderStatus(selectedOrder.Id, OrderStatus.Ready)"
                                        id="bartender-mark-ready-@selectedOrder.Id-btn">
                                    Mark Ready
                                </button>
                            }
                            else if (selectedOrder.Status == OrderStatus.Ready)
                            {
                                <button class="btn btn-primary" 
                                        @onclick="() => UpdateOrderStatus(selectedOrder.Id, OrderStatus.Delivered)"
                                        id="bartender-mark-delivered-@selectedOrder.Id-btn">
                                    Mark Delivered
                                </button>
                            }
                            <button type="button" class="btn btn-secondary" @onclick="CloseOrderDetails" id="bartender-close-modal-btn">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>


<script>
    // Generate floating particles
    function createParticles() {
        const particlesContainer = document.getElementById('particles');
        if (!particlesContainer) return;
        
        // Clear existing particles
        particlesContainer.innerHTML = '';
        
        for (let i = 0; i < 50; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 20 + 's';
            particle.style.animationDuration = (15 + Math.random() * 10) + 's';
            particlesContainer.appendChild(particle);
        }
    }

    // Initialize particles when page loads
    window.addEventListener('DOMContentLoaded', function() {
        createParticles();
    });
    
    // Reinitialize particles when navigating back
    window.addEventListener('pageshow', function() {
        createParticles();
    });
</script>
