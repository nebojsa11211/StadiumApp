@page "/test-error-handling"
@using StadiumDrinkOrdering.Admin.Services.ErrorHandling
@using StadiumDrinkOrdering.Admin.Services
@inject IErrorNotificationService ErrorNotificationService
@inject IAdminApiService ApiService

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3>üß™ Error Handling Test Page</h3>
                    <p class="mb-0">Test different error scenarios to verify error notifications are working</p>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h4>Manual Error Tests</h4>
                            <div class="d-grid gap-2">
                                <button class="btn btn-danger" @onclick="TestErrorNotification" id="admin-test-error-btn">
                                    üî¥ Test Error Message
                                </button>
                                <button class="btn btn-warning" @onclick="TestWarningNotification" id="admin-test-warning-btn">
                                    üü° Test Warning Message
                                </button>
                                <button class="btn btn-success" @onclick="TestSuccessNotification" id="admin-test-success-btn">
                                    üü¢ Test Success Message
                                </button>
                                <button class="btn btn-info" @onclick="TestInfoNotification" id="admin-test-info-btn">
                                    üîµ Test Info Message
                                </button>
                                <button class="btn btn-secondary" @onclick="TestAuthError" id="admin-test-auth-error-btn">
                                    üîê Test Authentication Error
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h4>API Error Tests</h4>
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-danger" @onclick="TestApiConnection" id="admin-test-api-connection-btn">
                                    üåê Test API Connection (Will likely fail if API not running)
                                </button>
                                <button class="btn btn-outline-warning" @onclick="TestDrinksFetch" id="admin-test-drinks-fetch-btn">
                                    ü•§ Test Drinks Fetch (Uses new error handling)
                                </button>
                                <button class="btn btn-outline-info" @onclick="TestOrdersFetch" id="admin-test-orders-fetch-btn">
                                    üì¶ Test Orders Fetch (Uses new error handling)
                                </button>
                            </div>
                        </div>
                    </div>

                    <hr class="my-4" />

                    <div class="alert alert-info">
                        <h5>üìã Test Results:</h5>
                        <p>Watch the top-right corner of the screen for toast notifications!</p>
                        <ul>
                            <li>‚úÖ <strong>Success</strong>: Green toast with checkmark</li>
                            <li>‚ö†Ô∏è <strong>Warning</strong>: Orange toast with warning icon</li>
                            <li>‚ùå <strong>Error</strong>: Red toast with error icon</li>
                            <li>‚ÑπÔ∏è <strong>Info</strong>: Blue toast with info icon</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private async Task TestErrorNotification()
    {
        await ErrorNotificationService.ShowErrorAsync(
            "This is a test error message! üö® The error handling system is working correctly.",
            "Test Error"
        );
    }

    private async Task TestWarningNotification()
    {
        await ErrorNotificationService.ShowWarningAsync(
            "This is a test warning message! ‚ö†Ô∏è Something needs your attention.",
            "Test Warning"
        );
    }

    private async Task TestSuccessNotification()
    {
        await ErrorNotificationService.ShowSuccessAsync(
            "This is a test success message! ‚úÖ Everything worked perfectly.",
            "Test Success"
        );
    }

    private async Task TestInfoNotification()
    {
        await ErrorNotificationService.ShowInfoAsync(
            "This is a test info message! ‚ÑπÔ∏è Here's some useful information.",
            "Test Information"
        );
    }

    private async Task TestAuthError()
    {
        await ErrorNotificationService.ShowAuthenticationErrorAsync("/test-error-handling");
    }

    private async Task TestApiConnection()
    {
        try
        {
            var drinks = await ApiService.GetDrinksAsync();
            if (drinks != null && drinks.Any())
            {
                await ErrorNotificationService.ShowSuccessAsync(
                    $"‚úÖ API is working! Found {drinks.Count()} drinks.",
                    "API Connection Test"
                );
            }
            else
            {
                await ErrorNotificationService.ShowWarningAsync(
                    "‚ö†Ô∏è API responded but returned no drinks. This could be normal if no drinks are configured.",
                    "API Connection Test"
                );
            }
        }
        catch (Exception ex)
        {
            // This will be handled by the error handling system automatically
            await ErrorNotificationService.ShowErrorAsync(
                $"‚ùå API connection failed: {ex.Message}",
                "API Connection Test"
            );
        }
    }

    private async Task TestDrinksFetch()
    {
        var drinks = await ApiService.GetDrinksAsync();
        if (drinks != null && drinks.Any())
        {
            await ErrorNotificationService.ShowSuccessAsync(
                $"ü•§ Successfully loaded {drinks.Count()} drinks!",
                "Drinks Test"
            );
        }
        else
        {
            await ErrorNotificationService.ShowInfoAsync(
                "ü•§ No drinks returned (this may have triggered an error notification if API is down)",
                "Drinks Test"
            );
        }
    }

    private async Task TestOrdersFetch()
    {
        var orders = await ApiService.GetOrdersAsync();
        if (orders != null && orders.Any())
        {
            await ErrorNotificationService.ShowSuccessAsync(
                $"üì¶ Successfully loaded {orders.Count()} orders!",
                "Orders Test"
            );
        }
        else
        {
            await ErrorNotificationService.ShowInfoAsync(
                "üì¶ No orders returned (this may have triggered an error notification if API is down)",
                "Orders Test"
            );
        }
    }
}