@page "/logs"
@using StadiumDrinkOrdering.Shared.DTOs
@using StadiumDrinkOrdering.Admin.Services
@using System.Net.Http
@inject IAdminApiService ApiService
@inject IJSRuntime JS
@inject IConsoleLoggingToggleService ToggleService

<PageTitle>System Logs</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>ðŸ“‹ System Logs</h2>
        <div class="d-flex gap-2 align-items-center">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="consoleToSystemToggle" @onchange="ToggleConsoleToSystemLogging" checked="@isConsoleToSystemLoggingEnabled">
                <label class="form-check-label" for="consoleToSystemToggle">
                    Console â†’ System Logs
                </label>
            </div>
            <button class="btn btn-outline-secondary" @onclick="RefreshLogs" id="admin-logs-refresh-btn">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
            <button class="btn btn-outline-danger" @onclick="ClearAllLogs" id="admin-logs-clear-btn">
                <i class="fas fa-trash"></i> Clear All Logs
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading logs...</p>
        </div>
    }
    else if (logSummary != null)
    {
        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Total Logs</h6>
                                <h3 class="mb-0">@logSummary.TotalLogs</h3>
                            </div>
                            <i class="fas fa-list fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-danger text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Errors</h6>
                                <h3 class="mb-0">@logSummary.ErrorCount</h3>
                            </div>
                            <i class="fas fa-exclamation-triangle fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Warnings</h6>
                                <h3 class="mb-0">@logSummary.WarningCount</h3>
                            </div>
                            <i class="fas fa-exclamation fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Info</h6>
                                <h3 class="mb-0">@logSummary.InfoCount</h3>
                            </div>
                            <i class="fas fa-info-circle fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Simple Filters -->
        <div class="card mb-4">
            <div class="card-body">
                <h6 class="card-title">Quick Filters</h6>
                <div class="row">
                    <div class="col-md-3">
                        <button class="btn @(selectedLevel == "Error" ? "btn-danger" : "btn-outline-danger") me-2" @onclick="@(() => FilterByLevel("Error"))" id="admin-logs-filter-error-btn">
                            Errors (@logSummary.ErrorCount)
                        </button>
                    </div>
                    <div class="col-md-3">
                        <button class="btn @(selectedLevel == "Warning" ? "btn-warning" : "btn-outline-warning") me-2" @onclick="@(() => FilterByLevel("Warning"))" id="admin-logs-filter-warning-btn">
                            Warnings (@logSummary.WarningCount)
                        </button>
                    </div>
                    <div class="col-md-3">
                        <button class="btn @(selectedLevel == "Info" ? "btn-info" : "btn-outline-info") me-2" @onclick="@(() => FilterByLevel("Info"))" id="admin-logs-filter-info-btn">
                            Info (@logSummary.InfoCount)
                        </button>
                    </div>
                    <div class="col-md-3">
                        <button class="btn @(selectedLevel == "" ? "btn-secondary" : "btn-outline-secondary")" @onclick="@(() => FilterByLevel(""))" id="admin-logs-filter-all-btn">
                            All Logs
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Logs Table -->
        <div class="card">
            <div class="card-body">
                @if (logs?.Logs?.Any() == true)
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Time</th>
                                    <th>Level</th>
                                    <th>Action</th>
                                    <th>User</th>
                                    <th>Source</th>
                                    <th>Message</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var log in logs.Logs.Take(50))
                                {
                                    <tr class="@GetRowClass(log.Level)">
                                        <td>
                                            <small>@log.Timestamp.ToLocalTime().ToString("MM-dd HH:mm:ss")</small>
                                        </td>
                                        <td>
                                            <span class="badge @GetLevelBadgeClass(log.Level)">@log.Level</span>
                                        </td>
                                        <td>@log.Action</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(log.UserEmail))
                                            {
                                                <small>@log.UserEmail</small>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-secondary">@log.Source</span>
                                        </td>
                                        <td style="max-width: 400px;">
                                            @if (!string.IsNullOrEmpty(log.Message))
                                            {
                                                @if (log.Message.Length > 100)
                                                {
                                                    <div class="message-cell">
                                                        <div class="message-preview" @onclick="@(() => ToggleMessage(log.Id))">
                                                            <small>@log.Message.Substring(0, 100)...</small>
                                                            <button class="btn btn-sm btn-outline-secondary ms-1" style="font-size: 0.7rem; padding: 0.1rem 0.3rem;">
                                                                <i class="fas fa-expand-alt"></i>
                                                            </button>
                                                        </div>
                                                        @if (expandedMessages.Contains(log.Id))
                                                        {
                                                            <div class="message-full mt-2 p-2 border rounded" style="background-color: rgba(0,0,0,0.05); word-break: break-word; white-space: pre-wrap;">
                                                                <small>@log.Message</small>
                                                                <button class="btn btn-sm btn-outline-secondary float-end" @onclick="@(() => ToggleMessage(log.Id))" style="font-size: 0.7rem; padding: 0.1rem 0.3rem;">
                                                                    <i class="fas fa-compress-alt"></i>
                                                                </button>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <small style="word-break: break-word;">@log.Message</small>
                                                }
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (logs.TotalCount > 50)
                    {
                        <div class="text-center mt-3">
                            <small class="text-muted">Showing first 50 of @logs.TotalCount logs. Use filters to narrow results.</small>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center p-4">
                        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No logs found.</p>
                    </div>
                }
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-3">
            @statusMessage
        </div>
    }
</div>

@code {
    private PagedLogsDto? logs;
    private LogSummaryDto? logSummary;
    private bool isLoading = true;
    private string selectedLevel = "";
    private string? statusMessage;
    private bool isSuccess = false;
    private bool isConsoleToSystemLoggingEnabled = false;
    private HashSet<int> expandedMessages = new HashSet<int>();

    protected override async Task OnInitializedAsync()
    {
        // Initialize console-to-system logging state using toggle service
        try
        {
            isConsoleToSystemLoggingEnabled = await ToggleService.GetIsEnabledAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Logs] Failed to get console-to-system logging state: {ex.Message}");
            isConsoleToSystemLoggingEnabled = false;
        }

        await LoadData();
        await ApiService.LogUserActionAsync("ViewLogsPage", "UserAction", "Admin viewed System Logs page");
    }

    private async Task LoadData()
    {
        isLoading = true;
        
        var filter = new LogFilterDto 
        { 
            Page = 1, 
            PageSize = 100,
            Level = selectedLevel
        };

        try 
        {
            logs = await ApiService.GetLogsAsync(filter);
            logSummary = await ApiService.GetLogSummaryAsync();
            
            // Ensure we have valid objects even if API returns null
            if (logs == null)
            {
                logs = new PagedLogsDto { Logs = new List<LogEntryDto>(), TotalCount = 0 };
            }
            
            if (logSummary == null)
            {
                logSummary = new LogSummaryDto 
                { 
                    TotalLogs = 0, 
                    ErrorCount = 0, 
                    WarningCount = 0, 
                    InfoCount = 0,
                    CriticalCount = 0,
                    LogsBySource = new Dictionary<string, int>(),
                    LogsByCategory = new Dictionary<string, int>()
                };
            }
            
            // Clear any previous error messages on successful load
            statusMessage = null;
        }
        catch (HttpRequestException httpEx)
        {
            // Show specific HTTP error details
            statusMessage = httpEx.Message;
            isSuccess = false;
            
            // Set safe defaults on error
            logs = new PagedLogsDto { Logs = new List<LogEntryDto>(), TotalCount = 0 };
            logSummary = new LogSummaryDto 
            { 
                TotalLogs = 0, 
                ErrorCount = 0, 
                WarningCount = 0, 
                InfoCount = 0,
                CriticalCount = 0,
                LogsBySource = new Dictionary<string, int>(),
                LogsByCategory = new Dictionary<string, int>()
            };
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading logs: {ex.Message}";
            isSuccess = false;
            
            // Set safe defaults on error
            logs = new PagedLogsDto { Logs = new List<LogEntryDto>(), TotalCount = 0 };
            logSummary = new LogSummaryDto 
            { 
                TotalLogs = 0, 
                ErrorCount = 0, 
                WarningCount = 0, 
                InfoCount = 0,
                CriticalCount = 0,
                LogsBySource = new Dictionary<string, int>(),
                LogsByCategory = new Dictionary<string, int>()
            };
        }
        
        isLoading = false;
        StateHasChanged();
    }

    private async Task RefreshLogs()
    {
        await LoadData();
        await ApiService.LogUserActionAsync("RefreshLogs", "UserAction", "Admin refreshed system logs");
        
        statusMessage = "Logs refreshed successfully!";
        isSuccess = true;
        StateHasChanged();
        
        await Task.Delay(3000);
        statusMessage = null;
        StateHasChanged();
    }

    private async Task FilterByLevel(string level)
    {
        selectedLevel = level;
        await LoadData();
        await ApiService.LogUserActionAsync("FilterLogs", "UserAction", $"Filtered logs by level: {level}");
    }

    private string GetRowClass(string level)
    {
        return level switch
        {
            "Error" => "table-danger",
            "Warning" => "table-warning",
            "Critical" => "table-danger",
            _ => ""
        };
    }

    private string GetLevelBadgeClass(string level)
    {
        return level switch
        {
            "Info" => "bg-info",
            "Warning" => "bg-warning text-dark",
            "Error" => "bg-danger",
            "Critical" => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private async Task ClearAllLogs()
    {
        var confirmResult = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to clear ALL logs? This action cannot be undone.");
        
        if (!confirmResult)
            return;

        try
        {
            var success = await ApiService.ClearAllLogsAsync();
            
            if (success)
            {
                // Reset local state immediately to prevent null reference issues
                logs = new PagedLogsDto { Logs = new List<LogEntryDto>(), TotalCount = 0 };
                logSummary = new LogSummaryDto 
                { 
                    TotalLogs = 0, 
                    ErrorCount = 0, 
                    WarningCount = 0, 
                    InfoCount = 0,
                    CriticalCount = 0,
                    LogsBySource = new Dictionary<string, int>(),
                    LogsByCategory = new Dictionary<string, int>()
                };
                
                statusMessage = "All logs cleared successfully!";
                isSuccess = true;
                
                // Force state update
                StateHasChanged();
                
                // Wait a moment for database consistency
                await Task.Delay(1000);
                
                // Refresh the data
                await LoadData();
                await ApiService.LogUserActionAsync("ClearAllLogs", "UserAction", "Admin cleared all logs");
            }
            else
            {
                statusMessage = "Failed to clear all logs. Please try again.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error clearing logs: {ex.Message}";
            isSuccess = false;
            
            // Reset to safe state on error
            logs = new PagedLogsDto { Logs = new List<LogEntryDto>(), TotalCount = 0 };
            logSummary = new LogSummaryDto 
            { 
                TotalLogs = 0, 
                ErrorCount = 0, 
                WarningCount = 0, 
                InfoCount = 0,
                CriticalCount = 0,
                LogsBySource = new Dictionary<string, int>(),
                LogsByCategory = new Dictionary<string, int>()
            };
        }

        StateHasChanged();
        
        // Clear message after 3 seconds
        await Task.Delay(3000);
        statusMessage = null;
        StateHasChanged();
    }

    private async Task ToggleConsoleToSystemLogging(ChangeEventArgs e)
    {
        isConsoleToSystemLoggingEnabled = (bool)e.Value!;

        try
        {
            // Use toggle service to persist and update
            await ToggleService.SetIsEnabledAsync(isConsoleToSystemLoggingEnabled);
            
            // Log this action
            await ApiService.LogUserActionAsync(
                "ToggleConsoleToSystemLogging", 
                "UserAction", 
                $"Console-to-System logging: {(isConsoleToSystemLoggingEnabled ? "Enabled" : "Disabled")}"
            );

            statusMessage = $"Console-to-System logging {(isConsoleToSystemLoggingEnabled ? "enabled" : "disabled")} and saved";
            isSuccess = true;
        }
        catch (Exception ex)
        {
            statusMessage = $"Error toggling console logging: {ex.Message}";
            isSuccess = false;
        }

        StateHasChanged();
        
        // Clear message after 2 seconds
        await Task.Delay(2000);
        statusMessage = null;
        StateHasChanged();
    }

    private void ToggleMessage(int logId)
    {
        if (expandedMessages.Contains(logId))
        {
            expandedMessages.Remove(logId);
        }
        else
        {
            expandedMessages.Add(logId);
        }
        StateHasChanged();
    }
}