@page "/bartender"
@using Microsoft.AspNetCore.SignalR.Client
@using StadiumDrinkOrdering.Shared.DTOs
@using StadiumDrinkOrdering.Shared.Models
@using StadiumDrinkOrdering.Admin.Services
@inject IAdminApiService ApiService
@inject ISignalRService SignalRService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<AuthRoute>
    <PageTitle>Bartender Dashboard</PageTitle>

    <div class="bartender-dashboard" id="bartender-dashboard-container">
        <div class="row">
            <div class="col-md-8">
                <div class="card" id="bartender-stadium-map-card">
                    <div class="card-header d-flex justify-content-between align-items-center" id="bartender-stadium-map-header">
                        <h5 id="bartender-stadium-map-title">üèüÔ∏è Stadium Map</h5>
                        <div>
                            <button class="btn btn-sm btn-outline-primary" @onclick="RefreshData" id="bartender-refresh-btn">
                                <span class="oi oi-reload"></span> Refresh
                            </button>
                        </div>
                    </div>
                    <div class="card-body" id="bartender-stadium-map-body">
                        @if (stadiumLayout == null)
                        {
                            <div class="text-center" id="bartender-loading-stadium">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p>Loading stadium layout...</p>
                            </div>
                        }
                        else
                        {
                            <div class="stadium-map-container" id="bartender-stadium-map-container">
                                <svg width="100%" height="500" viewBox="0 0 900 700" class="stadium-svg" id="bartender-stadium-svg">
                                    <defs>
                                        <radialGradient id="stadiumBg" cx="50%" cy="50%" r="70%">
                                            <stop offset="0%" style="stop-color:#f8fafc"/>
                                            <stop offset="100%" style="stop-color:#e2e8f0"/>
                                        </radialGradient>
                                        
                                        <linearGradient id="standGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                            <stop offset="0%" style="stop-color:#3b82f6"/>
                                            <stop offset="100%" style="stop-color:#1d4ed8"/>
                                        </linearGradient>
                                        
                                        <filter id="stadiumShadow">
                                            <feDropShadow dx="0" dy="4" stdDeviation="6" flood-opacity="0.15"/>
                                        </filter>
                                    </defs>

                                    <!-- Stadium Background -->
                                    <rect width="900" height="700" fill="url(#stadiumBg)"/>
                                    <ellipse cx="450" cy="350" rx="420" ry="320" fill="none" stroke="#64748b" stroke-width="3" filter="url(#stadiumShadow)"/>
                                    <ellipse cx="450" cy="350" rx="360" ry="260" fill="none" stroke="#94a3b8" stroke-width="2" opacity="0.5"/>
                                    
                                    <!-- Football Pitch -->
                                    <rect x="350" y="250" width="200" height="200" rx="10" fill="#22c55e" stroke="#16a34a" stroke-width="2" filter="drop-shadow(0 2px 4px rgba(0, 0, 0, 0.15))"/>
                                    <g stroke="#ffffff" stroke-width="2" fill="none" opacity="0.8">
                                        <line x1="450" y1="250" x2="450" y2="450"/>
                                        <circle cx="450" cy="350" r="30"/>
                                        <rect x="350" y="300" width="40" height="100"/>
                                        <rect x="510" y="300" width="40" height="100"/>
                                        <rect x="350" y="325" width="20" height="50"/>
                                        <rect x="530" y="325" width="20" height="50"/>
                                    </g>

                                    <!-- Stadium Stands -->
                                    <!-- North Stand -->
                                    <g class="stand-group">
                                        <path d="M 100 80 Q 450 50 800 80 L 740 150 Q 450 120 160 150 Z" fill="url(#standGradient)" stroke="#64748b" stroke-width="1.5" opacity="0.7"/>
                                        <path d="M 160 150 Q 450 120 740 150 L 680 190 Q 450 170 220 190 Z" fill="url(#standGradient)" stroke="#64748b" stroke-width="1.5" opacity="0.6"/>
                                        <line x1="350" y1="80" x2="320" y2="190" stroke="#cbd5e1" stroke-width="1" opacity="0.6"/>
                                        <line x1="550" y1="80" x2="580" y2="190" stroke="#cbd5e1" stroke-width="1" opacity="0.6"/>
                                        <text x="450" y="135" fill="white" font-family="system-ui, -apple-system, sans-serif" font-size="14px" font-weight="600" text-anchor="middle" dominant-baseline="middle" text-shadow="0 1px 2px rgba(0, 0, 0, 0.5)">NORTH</text>
                                    </g>
                                    
                                    <!-- South Stand -->
                                    <g class="stand-group">
                                        <path d="M 100 620 Q 450 650 800 620 L 740 550 Q 450 580 160 550 Z" fill="url(#standGradient)" stroke="#64748b" stroke-width="1.5" opacity="0.7"/>
                                        <path d="M 160 550 Q 450 580 740 550 L 680 510 Q 450 530 220 510 Z" fill="url(#standGradient)" stroke="#64748b" stroke-width="1.5" opacity="0.6"/>
                                        <line x1="350" y1="620" x2="320" y2="510" stroke="#cbd5e1" stroke-width="1" opacity="0.6"/>
                                        <line x1="550" y1="620" x2="580" y2="510" stroke="#cbd5e1" stroke-width="1" opacity="0.6"/>
                                        <text x="450" y="565" fill="white" font-family="system-ui, -apple-system, sans-serif" font-size="14px" font-weight="600" text-anchor="middle" dominant-baseline="middle" text-shadow="0 1px 2px rgba(0, 0, 0, 0.5)">SOUTH</text>
                                    </g>

                                    <!-- East Stand -->
                                    <g class="stand-group">
                                        <path d="M 820 120 Q 850 350 820 580 L 750 520 Q 780 350 750 180 Z" fill="url(#standGradient)" stroke="#64748b" stroke-width="1.5" opacity="0.7"/>
                                        <path d="M 750 180 Q 780 350 750 520 L 710 460 Q 730 350 710 240 Z" fill="url(#standGradient)" stroke="#64748b" stroke-width="1.5" opacity="0.6"/>
                                        <line x1="820" y1="270" x2="710" y2="290" stroke="#cbd5e1" stroke-width="1" opacity="0.6"/>
                                        <line x1="820" y1="430" x2="710" y2="410" stroke="#cbd5e1" stroke-width="1" opacity="0.6"/>
                                        <text x="765" y="350" fill="white" font-family="system-ui, -apple-system, sans-serif" font-size="14px" font-weight="600" text-anchor="middle" dominant-baseline="middle" text-shadow="0 1px 2px rgba(0, 0, 0, 0.5)">EAST</text>
                                    </g>

                                    <!-- West Stand -->
                                    <g class="stand-group">
                                        <path d="M 80 120 Q 50 350 80 580 L 150 520 Q 120 350 150 180 Z" fill="url(#standGradient)" stroke="#64748b" stroke-width="1.5" opacity="0.7"/>
                                        <path d="M 150 180 Q 120 350 150 520 L 190 460 Q 170 350 190 240 Z" fill="url(#standGradient)" stroke="#64748b" stroke-width="1.5" opacity="0.6"/>
                                        <line x1="80" y1="270" x2="190" y2="290" stroke="#cbd5e1" stroke-width="1" opacity="0.6"/>
                                        <line x1="80" y1="430" x2="190" y2="410" stroke="#cbd5e1" stroke-width="1" opacity="0.6"/>
                                        <text x="135" y="350" fill="white" font-family="system-ui, -apple-system, sans-serif" font-size="14px" font-weight="600" text-anchor="middle" dominant-baseline="middle" text-shadow="0 1px 2px rgba(0, 0, 0, 0.5)">WEST</text>
                                    </g>

                                    <!-- Stadium Seats -->
                                    @foreach (var section in stadiumLayout.Sections)
                                    {
                                        <g class="stadium-section" id="@("bartender-section-" + section.SectionName)">
                                            @foreach (var seat in section.Seats)
                                            {
                                                <circle cx="@seat.XCoordinate"
                                                        cy="@seat.YCoordinate"
                                                        r="15"
                                                        fill="@GetSeatColor(seat)"
                                                        stroke="@(selectedSeat?.Id == seat.Id ? "#000" : "#374151")"
                                                        stroke-width="@(selectedSeat?.Id == seat.Id ? 2 : 0.5)"
                                                        class="@GetSeatClass(seat)"
                                                        id="@("bartender-seat-" + seat.Id)"
                                                        title="@seat.SeatNumber"
                                                        @onclick="() => SelectSeat(seat)" />
                                            }
                                        </g>
                                    }
                                </svg>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card" id="bartender-order-queue-card">
                    <div class="card-header" id="bartender-order-queue-header">
                        <h5 id="bartender-order-queue-title">üìã Order Queue</h5>
                    </div>
                    <div class="card-body" id="bartender-order-queue-body">
                        @if (pendingOrders == null)
                        {
                            <div class="text-center" id="bartender-loading-orders">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p>Loading orders...</p>
                            </div>
                        }
                        else if (!pendingOrders.Any())
                        {
                            <p class="text-muted text-center" id="bartender-no-pending-orders">No pending orders</p>
                        }
                        else
                        {
                            <div class="order-queue" id="bartender-order-queue">
                                @foreach (var order in pendingOrders.OrderBy(o => o.CreatedAt))
                                {
                                    <div class="order-card mb-3 p-3 border rounded" 
                                         @onclick="() => SelectOrder(order)"
                                         id="bartender-order-card-@order.Id">
                                        <div class="d-flex justify-content-between">
                                            <strong id="bartender-order-number-@order.Id">Order #@order.Id</strong>
                                            <span class="badge @GetStatusBadgeClass(order.Status)" id="bartender-order-status-@order.Id">
                                                @GetStatusText(order.Status)
                                            </span>
                                        </div>
                                        <div class="text-muted small" id="bartender-order-details-@order.Id">
                                            Seat: @order.SeatNumber | @order.CreatedAt.ToString("HH:mm")
                                        </div>
                                        <div class="mt-2" id="bartender-order-items-@order.Id">
                                            @foreach (var item in order.OrderItems.Take(2))
                                            {
                                                <div class="small" id="bartender-order-item-@item.Id">@item.Quantity√ó @item.DrinkName</div>
                                            }
                                            @if (order.OrderItems.Count > 2)
                                            {
                                                <div class="small text-muted" id="bartender-order-more-items-@order.Id">+@(order.OrderItems.Count - 2) more items</div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Details Modal -->
        @if (selectedOrder != null)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" id="bartender-order-modal">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content" id="bartender-order-modal-content">
                        <div class="modal-header" id="bartender-order-modal-header">
                            <h5 class="modal-title" id="bartender-order-modal-title">Order #@selectedOrder.Id - @selectedOrder.SeatNumber</h5>
                            <button type="button" class="btn-close" @onclick="CloseOrderDetails" id="bartender-order-modal-close-btn"></button>
                        </div>
                        <div class="modal-body" id="bartender-order-modal-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6 id="bartender-order-items-title">Order Items</h6>
                                    <table class="table table-sm" id="bartender-order-items-table">
                                        <thead>
                                            <tr>
                                                <th>Item</th>
                                                <th>Qty</th>
                                                <th>Price</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in selectedOrder.OrderItems)
                                            {
                                                <tr id="bartender-order-item-row-@item.Id">
                                                    <td>@item.DrinkName</td>
                                                    <td>@item.Quantity</td>
                                                    <td>$@item.TotalPrice.ToString("F2")</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <p id="bartender-order-total"><strong>Total: $@selectedOrder.TotalAmount.ToString("F2")</strong></p>
                                </div>
                                <div class="col-md-6">
                                    <h6 id="bartender-order-details-title">Order Details</h6>
                                    <p id="bartender-order-ticket"><strong>Ticket:</strong> @selectedOrder.TicketNumber</p>
                                    <p id="bartender-order-seat"><strong>Seat:</strong> @selectedOrder.SeatNumber</p>
                                    <p id="bartender-order-status-display"><strong>Status:</strong> <span class="badge @GetStatusBadgeClass(selectedOrder.Status)" id="bartender-order-status-badge">@GetStatusText(selectedOrder.Status)</span></p>
                                    <p id="bartender-order-created"><strong>Created:</strong> @selectedOrder.CreatedAt.ToString("g")</p>
                                    @if (!string.IsNullOrEmpty(selectedOrder.CustomerNotes))
                                    {
                                        <p id="bartender-order-notes"><strong>Notes:</strong> @selectedOrder.CustomerNotes</p>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer" id="bartender-order-modal-footer">
                            @if (selectedOrder.Status == OrderStatus.Pending)
                            {
                                <button class="btn btn-success" 
                                        @onclick="() => UpdateOrderStatus(selectedOrder.Id, OrderStatus.Accepted)"
                                        id="bartender-accept-order-btn">
                                    Accept Order
                                </button>
                            }
                            else if (selectedOrder.Status == OrderStatus.Accepted)
                            {
                                <button class="btn btn-warning" 
                                        @onclick="() => UpdateOrderStatus(selectedOrder.Id, OrderStatus.InPreparation)"
                                        id="bartender-start-preparation-btn">
                                    Start Preparation
                                </button>
                            }
                            else if (selectedOrder.Status == OrderStatus.InPreparation)
                            {
                                <button class="btn btn-info" 
                                        @onclick="() => UpdateOrderStatus(selectedOrder.Id, OrderStatus.Ready)"
                                        id="bartender-mark-ready-btn">
                                    Mark Ready
                                </button>
                            }
                            else if (selectedOrder.Status == OrderStatus.Ready)
                            {
                                <button class="btn btn-primary" 
                                        @onclick="() => UpdateOrderStatus(selectedOrder.Id, OrderStatus.Delivered)"
                                        id="bartender-mark-delivered-btn">
                                    Mark Delivered
                                </button>
                            }
                            <button type="button" class="btn btn-secondary" @onclick="CloseOrderDetails" id="bartender-close-modal-btn">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</AuthRoute>

@code {
    private StadiumLayoutDto? stadiumLayout;
    private List<OrderDto> pendingOrders = new();
    private List<OrderDto> activeOrders = new();
    private StadiumSeatDto? selectedSeat;
    private OrderDto? selectedOrder;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await InitializeSignalR();
    }

    private async Task LoadData()
    {
        stadiumLayout = await ApiService.GetStadiumLayoutAsync();
        var allOrders = await ApiService.GetOrdersAsync();
        pendingOrders = allOrders?.Where(o => o.Status == OrderStatus.Pending).ToList() ?? new();
        activeOrders = allOrders?.Where(o => o.Status == OrderStatus.Accepted || 
                                           o.Status == OrderStatus.InPreparation || 
                                           o.Status == OrderStatus.Ready).ToList() ?? new();
    }

    private async Task InitializeSignalR()
    {
        SignalRService.NewOrder += OnNewOrder;
        SignalRService.OrderUpdated += OnOrderUpdated;
        SignalRService.OrderStatusChanged += OnOrderStatusChanged;
        
        try
        {
            await SignalRService.StartAsync();
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("No authentication token"))
        {
            Console.WriteLine("SignalR connection delayed: No authentication token available");
            // Token might not be available yet, retry after a short delay
            _ = Task.Run(async () =>
            {
                await Task.Delay(2000);
                try
                {
                    await SignalRService.StartAsync();
                    await InvokeAsync(StateHasChanged);
                }
                catch (Exception retryEx)
                {
                    Console.WriteLine($"SignalR connection failed on retry: {retryEx.Message}");
                }
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to initialize SignalR: {ex.Message}");
        }
    }

    private void OnNewOrder(OrderDto order)
    {
        if (order.Status == OrderStatus.Pending)
        {
            pendingOrders.Add(order);
            StateHasChanged();
        }
    }

    private void OnOrderUpdated(OrderDto order)
    {
        UpdateOrderInList(order);
        StateHasChanged();
    }

    private void OnOrderStatusChanged(int orderId, OrderStatus newStatus, string seatNumber)
    {
        var order = pendingOrders.FirstOrDefault(o => o.Id == orderId) ?? 
                   activeOrders.FirstOrDefault(o => o.Id == orderId);
        
        if (order != null)
        {
            order.Status = newStatus;
            UpdateOrderInList(order);
            StateHasChanged();
        }
    }

    private void UpdateOrderInList(OrderDto order)
    {
        pendingOrders.RemoveAll(o => o.Id == order.Id);
        activeOrders.RemoveAll(o => o.Id == order.Id);

        if (order.Status == OrderStatus.Pending)
        {
            pendingOrders.Add(order);
        }
        else if (order.Status == OrderStatus.Accepted || 
                 order.Status == OrderStatus.InPreparation || 
                 order.Status == OrderStatus.Ready)
        {
            activeOrders.Add(order);
        }
    }

    private Task SelectSeat(StadiumSeatDto seat)
    {
        selectedSeat = seat;
        if (seat.ActiveOrder != null)
        {
            selectedOrder = seat.ActiveOrder;
        }
        return Task.CompletedTask;
    }

    private Task SelectOrder(OrderDto order)
    {
        selectedOrder = order;
        return Task.CompletedTask;
    }

    private async Task UpdateOrderStatus(int orderId, OrderStatus newStatus)
    {
        var updateDto = new UpdateOrderStatusDto { Status = newStatus };
        var success = await ApiService.UpdateOrderStatusAsync(orderId, updateDto);
        if (success)
        {
            if (selectedOrder != null && selectedOrder.Id == orderId)
            {
                selectedOrder.Status = newStatus;
            }
            await LoadData();
            await SignalRService.SendOrderStatusChanged(orderId, newStatus, selectedOrder?.SeatNumber ?? "");
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
        StateHasChanged();
    }

    private void CloseOrderDetails()
    {
        selectedOrder = null;
    }

    private string GetSeatColor(StadiumSeatDto seat)
    {
        if (!seat.HasActiveOrder) return "#28a745";
        
        return seat.ActiveOrder?.Status switch
        {
            OrderStatus.Pending => "#ffc107",
            OrderStatus.Accepted => "#fd7e14",
            OrderStatus.InPreparation => "#007bff",
            OrderStatus.Ready => "#dc3545",
            _ => "#6c757d"
        };
    }

    private string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-warning text-dark",
            OrderStatus.Accepted => "bg-info",
            OrderStatus.InPreparation => "bg-primary",
            OrderStatus.Ready => "bg-success",
            OrderStatus.Delivered => "bg-success",
            OrderStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "Pending",
            OrderStatus.Accepted => "Accepted",
            OrderStatus.InPreparation => "Preparing",
            OrderStatus.Ready => "Ready",
            OrderStatus.Delivered => "Delivered",
            OrderStatus.Cancelled => "Cancelled",
            _ => status.ToString()
        };
    }

    private string GetSeatClass(StadiumSeatDto seat)
    {
        return "stadium-seat" + (seat.HasActiveOrder ? " has-order" : "");
    }

    public void Dispose()
    {
        SignalRService.NewOrder -= OnNewOrder;
        SignalRService.OrderUpdated -= OnOrderUpdated;
        SignalRService.OrderStatusChanged -= OnOrderStatusChanged;
        _ = SignalRService.StopAsync();
    }
}

<style>
.bartender-dashboard {
    padding: 20px;
}

.stadium-map-container {
    overflow: auto;
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.stadium-svg {
    background: transparent;
    width: 100%;
    height: auto;
}

.stand-group {
    transition: all 0.3s ease;
}

.stand-group:hover {
    opacity: 0.9;
    filter: brightness(1.1);
}

.stadium-seat {
    cursor: pointer;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
}

.stadium-seat:hover {
    transform: scale(1.1);
    filter: brightness(1.1) drop-shadow(0 2px 4px rgba(59, 130, 246, 0.4));
}

.stadium-seat.has-order {
    stroke: #ff6b6b;
    stroke-width: 2;
    animation: pulse 2s infinite;
}

@@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

.section-label {
    font-size: 14px;
    font-weight: bold;
    fill: #495057;
}

.order-card {
    cursor: pointer;
    transition: all 0.2s ease;
}

.order-card:hover {
    background-color: #f8f9fa;
    transform: translateY(-1px);
}

.order-queue {
    max-height: 400px;
    overflow-y: auto;
}
</style>
