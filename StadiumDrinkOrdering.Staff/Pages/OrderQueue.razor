@page "/order-queue"
@inject IStaffApiService ApiService
@inject IAuthStateService AuthService
@inject ISignalRService SignalRService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Order Queue</PageTitle>

@if (!AuthService.IsAuthenticated)
{
    <div class="container mt-5">
        <div class="alert alert-warning" role="alert">
            You must be logged in to view the order queue.
            <a href="/login" class="btn btn-primary ms-2">Login</a>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row mb-4">
            <div class="col">
                <h1>Order Queue</h1>
                <p class="text-muted">Live order management and assignment</p>
            </div>
            <div class="col-auto">
                <button class="btn btn-outline-primary" @onclick="RefreshOrders" id="staff-orderqueue-page-refresh-btn">
                    <span class="oi oi-reload me-2"></span>Refresh
                </button>
            </div>
        </div>

        <!-- Status Filter -->
        <div class="row mb-3">
            <div class="col">
                <div class="btn-group" role="group">
                    <button type="button" class="btn @(selectedStatus == "all" ? "btn-primary" : "btn-outline-primary")" @onclick='() => FilterOrders("all")' id="staff-orderqueue-page-filter-all-btn">
                        All (@allOrders.Count)
                    </button>
                    <button type="button" class="btn @(selectedStatus == "pending" ? "btn-primary" : "btn-outline-primary")" @onclick='() => FilterOrders("pending")' id="staff-orderqueue-page-filter-pending-btn">
                        Pending (@pendingOrders.Count)
                    </button>
                    <button type="button" class="btn @(selectedStatus == "accepted" ? "btn-primary" : "btn-outline-primary")" @onclick='() => FilterOrders("accepted")' id="staff-orderqueue-page-filter-accepted-btn">
                        Accepted (@acceptedOrders.Count)
                    </button>
                    <button type="button" class="btn @(selectedStatus == "preparation" ? "btn-primary" : "btn-outline-primary")" @onclick='() => FilterOrders("preparation")' id="staff-orderqueue-page-filter-preparation-btn">
                        In Preparation (@inPreparationOrders.Count)
                    </button>
                    <button type="button" class="btn @(selectedStatus == "ready" ? "btn-primary" : "btn-outline-primary")" @onclick='() => FilterOrders("ready")' id="staff-orderqueue-page-filter-ready-btn">
                        Ready (@readyOrders.Count)
                    </button>
                </div>
            </div>
        </div>

        <!-- Orders Grid -->
        <div class="row">
            @if (filteredOrders.Any())
            {
                @foreach (var order in filteredOrders.OrderBy(o => o.OrderDate))
                {
                    <div class="col-lg-6 col-xl-4 mb-4">
                        <div class="card @GetOrderCardClass(order.Status)">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">Order #@order.Id</h6>
                                <span class="badge @GetStatusBadgeClass(order.Status)">
                                    @order.Status
                                </span>
                            </div>
                            <div class="card-body">
                                <div class="row mb-2">
                                    <div class="col-sm-6">
                                        <strong>Customer:</strong><br>
                                        <small>@order.CustomerName</small>
                                    </div>
                                    <div class="col-sm-6">
                                        <strong>Seat:</strong><br>
                                        <small>@order.SeatNumber</small>
                                    </div>
                                </div>
                                
                                <div class="mb-2">
                                    <strong>Items:</strong><br>
                                    @foreach (var item in order.OrderItems)
                                    {
                                        <small class="d-block">
                                            @item.Quantity x @item.DrinkName
                                            @if (!string.IsNullOrEmpty(item.Notes))
                                            {
                                                <span class="text-muted">(@item.Notes)</span>
                                            }
                                        </small>
                                    }
                                </div>

                                <div class="mb-2">
                                    <strong>Total:</strong> $@order.TotalAmount.ToString("F2")
                                </div>

                                <div class="mb-3">
                                    <small class="text-muted">
                                        Ordered: @order.OrderDate.ToString("HH:mm:ss")
                                    </small>
                                </div>

                                <!-- Order Actions -->
                                <div class="d-grid gap-2">
                                    @if (order.Status == OrderStatus.Pending)
                                    {
                                        <button class="btn btn-success btn-sm" @onclick="() => AcceptOrder(order.Id)" id="staff-orderqueue-page-accept-btn-@order.Id">
                                            <span class="oi oi-check me-1"></span>Accept Order
                                        </button>
                                    }
                                    else if (order.Status == OrderStatus.Accepted)
                                    {
                                        <button class="btn btn-warning btn-sm" @onclick="() => StartPreparation(order.Id)" id="staff-orderqueue-page-start-prep-btn-@order.Id">
                                            <span class="oi oi-wrench me-1"></span>Start Preparation
                                        </button>
                                    }
                                    else if (order.Status == OrderStatus.InPreparation)
                                    {
                                        <button class="btn btn-info btn-sm" @onclick="() => MarkReady(order.Id)" id="staff-orderqueue-page-mark-ready-btn-@order.Id">
                                            <span class="oi oi-box me-1"></span>Mark Ready
                                        </button>
                                    }
                                    else if (order.Status == OrderStatus.Ready)
                                    {
                                        <button class="btn btn-primary btn-sm" @onclick="() => StartDelivery(order.Id)" id="staff-orderqueue-page-start-delivery-btn-@order.Id">
                                            <span class="oi oi-arrow-right me-1"></span>Start Delivery
                                        </button>
                                    }
                                    
                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => ViewOrderDetails(order.Id)" id="staff-orderqueue-page-view-details-btn-@order.Id">
                                        <span class="oi oi-eye me-1"></span>View Details
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <div class="text-center py-5">
                        <span class="oi oi-inbox" style="font-size: 4rem; color: #ccc;"></span>
                        <h4 class="mt-3 text-muted">No orders in queue</h4>
                        <p class="text-muted">New orders will appear here automatically</p>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<OrderDto> allOrders = new();
    private List<OrderDto> pendingOrders = new();
    private List<OrderDto> acceptedOrders = new();
    private List<OrderDto> inPreparationOrders = new();
    private List<OrderDto> readyOrders = new();
    private List<OrderDto> filteredOrders = new();
    private string selectedStatus = "all";

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        try
        {
            if (!SignalRService.IsConnected)
            {
                await SignalRService.StartAsync();
                await SignalRService.JoinStaffHub();
            }
            
            SignalRService.NewOrder += OnNewOrder;
            SignalRService.OrderUpdated += OnOrderUpdated;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to start SignalR: {ex.Message}");
        }

        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        try
        {
            var orders = await ApiService.GetActiveOrdersAsync() ?? new List<OrderDto>();
            allOrders = orders;

            pendingOrders = orders.Where(o => o.Status == OrderStatus.Pending).ToList();
            acceptedOrders = orders.Where(o => o.Status == OrderStatus.Accepted).ToList();
            inPreparationOrders = orders.Where(o => o.Status == OrderStatus.InPreparation).ToList();
            readyOrders = orders.Where(o => o.Status == OrderStatus.Ready).ToList();

            FilterOrders(selectedStatus);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load orders: {ex.Message}");
        }
    }

    private void FilterOrders(string status)
    {
        selectedStatus = status;
        
        filteredOrders = selectedStatus switch
        {
            "pending" => pendingOrders,
            "accepted" => acceptedOrders,
            "preparation" => inPreparationOrders,
            "ready" => readyOrders,
            _ => allOrders
        };

        StateHasChanged();
    }

    private async Task AcceptOrder(int orderId)
    {
        var updateDto = new UpdateOrderStatusDto 
        { 
            Status = OrderStatus.Accepted,
            Notes = "Order accepted by staff"
        };
        
        var success = await ApiService.UpdateOrderStatusAsync(orderId, updateDto);
        if (success)
        {
            await LoadOrders();
            await SignalRService.SendOrderStatusChanged(orderId, OrderStatus.Accepted, "");
        }
    }

    private async Task StartPreparation(int orderId)
    {
        var updateDto = new UpdateOrderStatusDto 
        { 
            Status = OrderStatus.InPreparation,
            Notes = "Preparation started"
        };
        
        var success = await ApiService.UpdateOrderStatusAsync(orderId, updateDto);
        if (success)
        {
            await LoadOrders();
            await SignalRService.SendOrderStatusChanged(orderId, OrderStatus.InPreparation, "");
        }
    }

    private async Task MarkReady(int orderId)
    {
        var updateDto = new UpdateOrderStatusDto 
        { 
            Status = OrderStatus.Ready,
            Notes = "Order ready for delivery"
        };
        
        var success = await ApiService.UpdateOrderStatusAsync(orderId, updateDto);
        if (success)
        {
            await LoadOrders();
            await SignalRService.SendOrderStatusChanged(orderId, OrderStatus.Ready, "");
        }
    }

    private async Task StartDelivery(int orderId)
    {
        var updateDto = new UpdateOrderStatusDto 
        { 
            Status = OrderStatus.OutForDelivery,
            Notes = "Out for delivery"
        };
        
        var success = await ApiService.UpdateOrderStatusAsync(orderId, updateDto);
        if (success)
        {
            await LoadOrders();
            await SignalRService.SendOrderStatusChanged(orderId, OrderStatus.OutForDelivery, "");
        }
    }

    private void ViewOrderDetails(int orderId)
    {
        Navigation.NavigateTo($"/order/{orderId}");
    }

    private async Task RefreshOrders()
    {
        await LoadOrders();
    }

    private async void OnNewOrder(OrderDto order)
    {
        await InvokeAsync(async () =>
        {
            await LoadOrders();
        });
    }

    private async void OnOrderUpdated(OrderDto order)
    {
        await InvokeAsync(async () =>
        {
            await LoadOrders();
        });
    }

    private string GetOrderCardClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "border-warning",
            OrderStatus.Accepted => "border-primary",
            OrderStatus.InPreparation => "border-info",
            OrderStatus.Ready => "border-success",
            _ => ""
        };
    }

    private string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-warning",
            OrderStatus.Accepted => "bg-primary",
            OrderStatus.InPreparation => "bg-info",
            OrderStatus.Ready => "bg-success",
            OrderStatus.OutForDelivery => "bg-dark",
            OrderStatus.Delivered => "bg-success",
            OrderStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    public void Dispose()
    {
        if (SignalRService != null)
        {
            SignalRService.NewOrder -= OnNewOrder;
            SignalRService.OrderUpdated -= OnOrderUpdated;
        }
    }
}