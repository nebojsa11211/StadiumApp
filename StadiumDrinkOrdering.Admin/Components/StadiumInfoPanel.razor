@using StadiumDrinkOrdering.Shared.DTOs
@using StadiumDrinkOrdering.Shared.Models

<div class="stadium-info-panel @(IsCollapsed ? "collapsed" : "expanded")" id="stadium-info-panel">
    <div class="panel-header" id="stadium-info-panel-header">
        <button class="toggle-btn" @onclick="TogglePanel" 
                aria-label="@(IsCollapsed ? "Expand" : "Collapse") stadium information panel"
                aria-expanded="@(!IsCollapsed)"
                id="stadium-info-panel-toggle-btn">
            <i class="bi @(IsCollapsed ? "bi-chevron-right" : "bi-chevron-left")" id="stadium-info-panel-toggle-icon"></i>
        </button>
        @if (!IsCollapsed)
        {
            <h4 class="panel-title" id="stadium-info-panel-title">
                <i class="bi bi-building" id="stadium-info-panel-title-icon"></i>
                Stadium Information
            </h4>
        }
    </div>

    @if (!IsCollapsed)
    {
        <div class="panel-content" id="stadium-info-panel-content">
            @if (StadiumData != null)
            {
                <!-- Stadium Overview Card -->
                <div class="info-card stadium-overview" id="stadium-overview-card">
                    <div class="card-header" id="stadium-overview-card-header">
                        <h5 id="stadium-overview-card-title">Stadium Overview</h5>
                        <span class="badge badge-admin" id="stadium-overview-admin-badge">ADMIN</span>
                    </div>
                    <div class="card-content" id="stadium-overview-card-content">
                        <div class="stadium-name" id="stadium-name-display">
                            <i class="bi bi-geo-alt" id="stadium-name-icon"></i>
                            @StadiumData.Name
                        </div>
                        <div class="capacity-display" id="stadium-capacity-display">
                            <span class="capacity-number" id="stadium-capacity-number">@TotalCapacity.ToString("N0")</span>
                            <span class="capacity-label" id="stadium-capacity-label">Total Capacity</span>
                        </div>
                        @if (SelectedEvent != null)
                        {
                            <div class="current-event" id="stadium-current-event">
                                <i class="bi bi-calendar-event" id="stadium-current-event-icon"></i>
                                <div id="stadium-current-event-details">
                                    <strong id="stadium-current-event-name">@SelectedEvent.EventName</strong>
                                    <small id="stadium-current-event-date">@SelectedEvent.EventDate.ToString("MMM dd, yyyy")</small>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="no-event" id="stadium-no-event">
                                <i class="bi bi-calendar-x" id="stadium-no-event-icon"></i>
                                <span id="stadium-no-event-text">No event selected</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Structure Statistics Card -->
                <div class="info-card structure-stats" id="structure-stats-card">
                    <div class="card-header" id="structure-stats-card-header">
                        <h5 id="structure-stats-card-title">Structure Statistics</h5>
                        <i class="bi bi-diagram-3" id="structure-stats-card-icon"></i>
                    </div>
                    <div class="card-content" id="structure-stats-card-content">
                        <div class="stat-item" id="tribunes-stat-item">
                            <span class="stat-number" id="tribunes-count">@StadiumData.Stands.Count</span>
                            <span class="stat-label" id="tribunes-label">Tribunes</span>
                        </div>
                        
                        <div class="tribunes-list" id="tribunes-list">
                            @foreach (var stand in StadiumData.Stands.OrderBy(s => s.TribuneCode))
                            {
                                <div class="tribune-item" @onclick="() => OnTribuneClick(stand)" 
                                     @onmouseover="() => OnTribuneHover(stand, true)"
                                     @onmouseout="() => OnTribuneHover(stand, false)"
                                     id="tribune-item-@(stand.TribuneCode.ToLower())">
                                    <span class="tribune-badge tribune-@(stand.TribuneCode.ToLower())" id="tribune-badge-@(stand.TribuneCode.ToLower())">@stand.TribuneCode</span>
                                    <div class="tribune-info" id="tribune-info-@(stand.TribuneCode.ToLower())">
                                        <strong id="tribune-name-@(stand.TribuneCode.ToLower())">@stand.Name</strong>
                                        <small id="tribune-details-@(stand.TribuneCode.ToLower())">@stand.Sectors.Count sectors â€¢ @stand.Sectors.Sum(s => s.TotalSeats).ToString("N0") seats</small>
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="summary-stats" id="summary-stats">
                            <div class="stat-pair" id="total-sectors-stat">
                                <span class="stat-number" id="total-sectors-number">@TotalSectors</span>
                                <span class="stat-label" id="total-sectors-label">Total Sectors</span>
                            </div>
                            <div class="stat-pair" id="avg-seats-stat">
                                <span class="stat-number" id="avg-seats-number">@AverageSeatsPerSector.ToString("N0")</span>
                                <span class="stat-label" id="avg-seats-label">Avg Seats/Sector</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Occupancy Analytics Card (Event Dependent) -->
                @if (EventSeatStatus != null && SelectedEvent != null)
                {
                    <div class="info-card occupancy-analytics" id="occupancy-analytics-card">
                        <div class="card-header" id="occupancy-analytics-card-header">
                            <h5 id="occupancy-analytics-card-title">Occupancy Analytics</h5>
                            <i class="bi bi-pie-chart" id="occupancy-analytics-card-icon"></i>
                        </div>
                        <div class="card-content" id="occupancy-analytics-card-content">
                            <div class="overall-occupancy" id="overall-occupancy">
                                <div class="occupancy-percentage" id="overall-occupancy-percentage">@OverallOccupancyPercentage.ToString("N1")%</div>
                                <div class="occupancy-bar" id="overall-occupancy-bar">
                                    <div class="occupancy-fill" id="overall-occupancy-fill" style="width: @(OverallOccupancyPercentage)%"></div>
                                </div>
                                <span class="occupancy-label" id="overall-occupancy-label">Overall Occupancy</span>
                            </div>

                            <div class="seat-breakdown" id="seat-breakdown">
                                <div class="seat-stat seat-available" id="seat-available-stat">
                                    <i class="bi bi-circle-fill" id="seat-available-icon"></i>
                                    <span class="seat-count" id="seat-available-count">@TotalAvailableSeats.ToString("N0")</span>
                                    <span class="seat-label" id="seat-available-label">Available</span>
                                </div>
                                <div class="seat-stat seat-sold" id="seat-sold-stat">
                                    <i class="bi bi-circle-fill" id="seat-sold-icon"></i>
                                    <span class="seat-count" id="seat-sold-count">@TotalSoldSeats.ToString("N0")</span>
                                    <span class="seat-label" id="seat-sold-label">Sold</span>
                                </div>
                                <div class="seat-stat seat-reserved" id="seat-reserved-stat">
                                    <i class="bi bi-circle-fill" id="seat-reserved-icon"></i>
                                    <span class="seat-count" id="seat-reserved-count">@TotalReservedSeats.ToString("N0")</span>
                                    <span class="seat-label" id="seat-reserved-label">Reserved</span>
                                </div>
                            </div>

                            <div class="tribune-occupancy" id="tribune-occupancy">
                                @foreach (var stand in StadiumData.Stands.OrderBy(s => s.TribuneCode))
                                {
                                    var tribuneOccupancy = GetTribuneOccupancy(stand);
                                    <div class="tribune-occupancy-item" id="tribune-occupancy-item-@(stand.TribuneCode.ToLower())">
                                        <div class="tribune-occupancy-header" id="tribune-occupancy-header-@(stand.TribuneCode.ToLower())">
                                            <span class="tribune-badge tribune-@(stand.TribuneCode.ToLower())" id="tribune-occupancy-badge-@(stand.TribuneCode.ToLower())">@stand.TribuneCode</span>
                                            <span class="occupancy-percent" id="tribune-occupancy-percent-@(stand.TribuneCode.ToLower())">@tribuneOccupancy.ToString("N1")%</span>
                                        </div>
                                        <div class="mini-progress" id="tribune-occupancy-progress-@(stand.TribuneCode.ToLower())">
                                            <div class="progress-fill" id="tribune-occupancy-progress-fill-@(stand.TribuneCode.ToLower())" style="width: @(tribuneOccupancy)%"></div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

                <!-- Technical Information Card (Collapsible) -->
                <div class="info-card technical-info" id="technical-info-card">
                    <button class="card-header collapsible @(showTechnical ? "expanded" : "")" 
                            @onclick="() => showTechnical = !showTechnical"
                            id="technical-info-toggle-btn">
                        <h5 id="technical-info-card-title">Technical Information</h5>
                        <i class="bi @(showTechnical ? "bi-chevron-up" : "bi-chevron-down")" id="technical-info-toggle-icon"></i>
                    </button>
                    @if (showTechnical)
                    {
                        <div class="card-content technical-details" id="technical-info-card-content">
                            <div class="tech-item" id="stadium-id-tech-item">
                                <span class="tech-label" id="stadium-id-tech-label">Stadium ID:</span>
                                <span class="tech-value" id="stadium-id-tech-value">@StadiumData.StadiumId</span>
                            </div>
                            <div class="tech-item" id="dimensions-tech-item">
                                <span class="tech-label" id="dimensions-tech-label">Dimensions:</span>
                                <span class="tech-value" id="dimensions-tech-value">@StadiumData.CoordinateSystem.Width Ã— @StadiumData.CoordinateSystem.Height</span>
                            </div>
                            <div class="tech-item" id="coordinate-unit-tech-item">
                                <span class="tech-label" id="coordinate-unit-tech-label">Coordinate Unit:</span>
                                <span class="tech-value" id="coordinate-unit-tech-value">@StadiumData.CoordinateSystem.Unit</span>
                            </div>
                            <div class="tech-item" id="last-updated-tech-item">
                                <span class="tech-label" id="last-updated-tech-label">Last Updated:</span>
                                <span class="tech-value" id="last-updated-tech-value">@DateTime.Now.ToString("MMM dd, yyyy HH:mm")</span>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="info-card no-data" id="no-stadium-data-card">
                    <div class="card-content" id="no-stadium-data-content">
                        <i class="bi bi-exclamation-triangle" id="no-stadium-data-icon"></i>
                        <h6 id="no-stadium-data-title">No Stadium Data</h6>
                        <p id="no-stadium-data-message">Stadium structure not loaded or available.</p>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public StadiumViewerDto? StadiumData { get; set; }
    [Parameter] public EventSeatStatusDto? EventSeatStatus { get; set; }
    [Parameter] public Event? SelectedEvent { get; set; }
    [Parameter] public bool IsCollapsed { get; set; } = false;
    [Parameter] public EventCallback OnTogglePanel { get; set; }
    [Parameter] public EventCallback<StadiumStandDto> OnTribuneSelected { get; set; }
    [Parameter] public EventCallback<(StadiumStandDto, bool)> OnTribuneHovered { get; set; }

    private bool showTechnical = false;

    // Computed properties
    private int TotalCapacity => StadiumData?.Stands.Sum(s => s.Sectors.Sum(sec => sec.TotalSeats)) ?? 0;
    private int TotalSectors => StadiumData?.Stands.Sum(s => s.Sectors.Count) ?? 0;
    private int AverageSeatsPerSector => TotalSectors > 0 ? TotalCapacity / TotalSectors : 0;

    private int TotalSoldSeats => EventSeatStatus?.SectorSummaries.Values.Sum(s => s.SoldSeats) ?? 0;
    private int TotalReservedSeats => EventSeatStatus?.SectorSummaries.Values.Sum(s => s.HeldSeats) ?? 0;
    private int TotalAvailableSeats => EventSeatStatus?.SectorSummaries.Values.Sum(s => s.FreeSeats) ?? 0;
    private decimal OverallOccupancyPercentage 
    {
        get
        {
            if (TotalCapacity == 0) return 0;
            return Math.Round((decimal)(TotalSoldSeats + TotalReservedSeats) / TotalCapacity * 100, 1);
        }
    }

    private async Task TogglePanel()
    {
        IsCollapsed = !IsCollapsed;
        if (OnTogglePanel.HasDelegate)
            await OnTogglePanel.InvokeAsync();
    }

    private async Task OnTribuneClick(StadiumStandDto stand)
    {
        if (OnTribuneSelected.HasDelegate)
            await OnTribuneSelected.InvokeAsync(stand);
    }

    private async Task OnTribuneHover(StadiumStandDto stand, bool isHovering)
    {
        if (OnTribuneHovered.HasDelegate)
            await OnTribuneHovered.InvokeAsync((stand, isHovering));
    }

    private decimal GetTribuneOccupancy(StadiumStandDto stand)
    {
        if (EventSeatStatus == null || !stand.Sectors.Any()) return 0;

        var tribuneTotal = stand.Sectors.Sum(s => s.TotalSeats);
        if (tribuneTotal == 0) return 0;

        var tribuneOccupied = stand.Sectors
            .Where(s => EventSeatStatus.SectorSummaries.ContainsKey(s.Id))
            .Sum(s => EventSeatStatus.SectorSummaries[s.Id].SoldSeats + EventSeatStatus.SectorSummaries[s.Id].HeldSeats);

        return Math.Round((decimal)tribuneOccupied / tribuneTotal * 100, 1);
    }
}