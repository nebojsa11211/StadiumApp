@page "/login"
@using StadiumDrinkOrdering.Shared.DTOs
@using StadiumDrinkOrdering.Admin.Services
@inject IAdminApiService ApiService
@inject IAuthStateService AuthStateService
@inject NavigationManager NavigationManager

<PageTitle>Admin Login</PageTitle>

<div class="container mt-5" id="admin-login-container">
    <div class="row justify-content-center" id="admin-login-row">
        <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-4" id="admin-login-col">
            <div class="card" id="admin-login-card">
                <div class="card-header" id="admin-login-header">
                    <h3 class="text-center" id="admin-login-title">üèüÔ∏è Stadium Admin Login</h3>
                </div>
                <div class="card-body" id="admin-login-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" id="admin-login-error">
                            @errorMessage
                        </div>
                    }
                    
                    <form @onsubmit="HandleLogin" id="admin-login-form">
                        <div class="mb-3" id="admin-login-email-group">
                            <label class="form-label" for="admin-login-email-input">Email</label>
                            <input type="email" class="form-control" @bind="email" required id="admin-login-email-input" />
                        </div>
                        
                        <div class="mb-3" id="admin-login-password-group">
                            <label class="form-label" for="admin-login-password-input">Password</label>
                            <input type="password" class="form-control" @bind="password" required id="admin-login-password-input" />
                        </div>
                        
                        <div class="d-grid" id="admin-login-button-group">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading" id="admin-login-submit-btn">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" id="admin-login-spinner"></span>
                                    <span id="admin-login-loading-text">Logging in...</span>
                                }
                                else
                                {
                                    <span id="admin-login-button-text">Login</span>
                                }
                            </button>
                        </div>
                    </form>
                    
                    <div class="mt-3 text-center" id="admin-login-demo-info">
                        <small class="text-muted" id="admin-login-demo-text">
                            Use admin@stadium.com/admin123 for demo purposes
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string email = "";
    private string password = "";
    private string? errorMessage;
    private bool isLoading;
    private string? returnUrl;

    protected override void OnInitialized()
    {
        // Check if user is already authenticated
        if (AuthStateService.IsAuthenticated)
        {
            NavigateToReturnUrl();
            return;
        }

        // Get return URL from query string
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        returnUrl = query["returnUrl"];
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var loginDto = new LoginDto { Email = email, Password = password };
            var result = await ApiService.LoginAsync(loginDto);
            
            if (!string.IsNullOrEmpty(result?.Token))
            {
                await AuthStateService.LoginAsync(result.Token, email);
                await ApiService.LogUserActionAsync("AdminLogin", "Authentication", $"Admin user {email} logged in successfully");
                NavigateToReturnUrl();
            }
            else
            {
                errorMessage = "Invalid credentials. Please try again.";
                await ApiService.LogUserActionAsync("AdminLoginFailed", "Authentication", $"Failed login attempt for {email}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
            await ApiService.LogUserActionAsync("AdminLoginError", "Authentication", $"Login error for {email}: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToReturnUrl()
    {
        var targetUrl = "/";
        
        if (!string.IsNullOrEmpty(returnUrl))
        {
            try
            {
                targetUrl = Uri.UnescapeDataString(returnUrl);
                // Ensure it's a relative URL for security
                if (targetUrl.StartsWith("http"))
                {
                    targetUrl = "/";
                }
            }
            catch
            {
                targetUrl = "/";
            }
        }

        NavigationManager.NavigateTo(targetUrl, forceLoad: true);
    }
}
