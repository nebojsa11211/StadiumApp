@page "/"
@using StadiumDrinkOrdering.Staff.Components.Dashboard
@using StadiumDrinkOrdering.Staff.Services
@using StadiumDrinkOrdering.Staff.Models
@inject IDashboardService DashboardService
@inject IAuthStateService AuthService
@inject ISignalRService SignalRService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Staff Dashboard</PageTitle>

@if (!AuthService.IsAuthenticated)
{
    <div class="container mt-5">
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">üîê Authentication Required</h4>
            <p>You must be logged in to access the staff dashboard.</p>
            <hr>
            <p class="mb-0">
                <a href="/login" class="btn btn-primary">Go to Login</a>
            </p>
        </div>
    </div>
}
else
{
    <div class="container-fluid dashboard-container">
        <!-- Dashboard Header -->
        <div class="dashboard-header">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1>Staff Dashboard</h1>
                    <p class="text-muted mb-0">Real-time order management and fulfillment</p>
                </div>
                <div class="d-flex align-items-center gap-3">
                    @if (dashboardData.LastUpdated != default)
                    {
                        <small class="text-muted">
                            Last updated: @dashboardData.LastUpdated.ToString("HH:mm:ss")
                        </small>
                    }
                    <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshData" disabled="@isRefreshing">
                        @if (isRefreshing)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        else
                        {
                            <span class="oi oi-reload me-1"></span>
                        }
                        Refresh
                    </button>
                </div>
            </div>
        </div>

        <!-- Dashboard Metrics -->
        <div class="row dashboard-metrics">
            @if (dashboardData.IsLoading)
            {
                @for (int i = 0; i < 4; i++)
                {
                    <DashboardCard IsLoading="true" />
                }
            }
            else
            {
                @foreach (var cardData in dashboardData.GetDashboardCards())
                {
                    <DashboardCard
                        Title="@cardData.Title"
                        Value="@cardData.Value"
                        IconClass="@cardData.IconClass"
                        BackgroundClass="@cardData.BackgroundClass"
                        TextColorClass="@cardData.TextColorClass"
                        Subtitle="@cardData.Subtitle"
                        Clickable="@cardData.Clickable"
                        OnClick="@(() => HandleCardClick(cardData))" />
                }
            }
        </div>

        <div class="row">
            <!-- Recent Orders -->
            <div class="col-lg-8 mb-4">
                <RecentOrdersList
                    Title="Recent Orders"
                    Orders="@dashboardData.RecentOrders"
                    IsLoading="@dashboardData.IsLoading"
                    ShowActions="true"
                    MaxDisplayCount="10"
                    ViewAllUrl="/order-queue"
                    OnOrderClick="@HandleOrderClick" />
            </div>

            <!-- Side Panel -->
            <div class="col-lg-4">
                <!-- Quick Actions -->
                <div class="mb-4">
                    <QuickActionsPanel
                        Title="Quick Actions"
                        Actions="@dashboardData.QuickActions"
                        IsLoading="@dashboardData.IsLoading" />
                </div>

                <!-- Connection Status -->
                <ConnectionStatusCard
                    Title="Connection Status"
                    IsConnected="@SignalRService.IsConnected"
                    IsLoading="@dashboardData.IsLoading"
                    IsReconnecting="@isReconnecting"
                    LastConnectedTime="@lastConnectedTime"
                    OnReconnectClick="@HandleReconnectClick"
                    StatusMessage="@connectionStatusMessage" />
            </div>
        </div>

        @if (!string.IsNullOrEmpty(dashboardData.ErrorMessage))
        {
            <div class="alert alert-warning alert-dismissible fade show mt-3" role="alert">
                <strong>Warning:</strong> @dashboardData.ErrorMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
    </div>
}

@code {
    private DashboardViewModel dashboardData = new() { IsLoading = true };
    private bool isRefreshing = false;
    private bool isReconnecting = false;
    private DateTime? lastConnectedTime = null;
    private string? connectionStatusMessage = null;
    private System.Threading.Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsAuthenticated)
        {
            return;
        }

        // Setup authentication change handler
        AuthService.OnAuthenticationStateChanged += OnAuthenticationStateChanged;

        // Initialize SignalR
        try
        {
            await SignalRService.StartAsync();
            await SignalRService.JoinStaffHub();

            SignalRService.NewOrder += OnNewOrder;
            SignalRService.OrderUpdated += OnOrderUpdated;

            lastConnectedTime = DateTime.Now;
            connectionStatusMessage = "SignalR connection established";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to start SignalR: {ex.Message}");
            connectionStatusMessage = $"SignalR connection failed: {ex.Message}";
        }

        // Load initial dashboard data
        await LoadDashboardData();

        // Setup auto-refresh timer (every 30 seconds)
        refreshTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadDashboardData();
            });
        }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    private async Task LoadDashboardData()
    {
        try
        {
            dashboardData = await DashboardService.GetDashboardDataAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load dashboard data: {ex.Message}");
            dashboardData.ErrorMessage = "Failed to load dashboard data. Please try refreshing.";
            dashboardData.IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RefreshData()
    {
        if (isRefreshing) return;

        isRefreshing = true;
        try
        {
            await JSRuntime.InvokeVoidAsync("blazorDashboard.showToast", "Refreshing dashboard data...", "info");
            await DashboardService.RefreshDataAsync();
            await LoadDashboardData();
            await JSRuntime.InvokeVoidAsync("blazorDashboard.showToast", "Dashboard refreshed successfully", "success");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to refresh data: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("blazorDashboard.showToast", "Failed to refresh dashboard", "danger");
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task HandleCardClick(DashboardCardData cardData)
    {
        if (!string.IsNullOrEmpty(cardData.ClickUrl))
        {
            Navigation.NavigateTo(cardData.ClickUrl);
        }
    }

    private async Task HandleOrderClick(OrderDto order)
    {
        Navigation.NavigateTo($"/order-queue");
    }

    private async Task HandleReconnectClick()
    {
        if (isReconnecting) return;

        isReconnecting = true;
        connectionStatusMessage = "Attempting to reconnect...";

        try
        {
            await SignalRService.StopAsync();
            await Task.Delay(1000); // Brief delay before reconnecting

            await SignalRService.StartAsync();
            await SignalRService.JoinStaffHub();

            lastConnectedTime = DateTime.Now;
            connectionStatusMessage = "Reconnected successfully";

            await JSRuntime.InvokeVoidAsync("blazorDashboard.showToast", "SignalR reconnected successfully", "success");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to reconnect SignalR: {ex.Message}");
            connectionStatusMessage = $"Reconnection failed: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("blazorDashboard.showToast", "Failed to reconnect SignalR", "danger");
        }
        finally
        {
            isReconnecting = false;
            StateHasChanged();
        }
    }

    private void OnAuthenticationStateChanged()
    {
        if (!AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
        }
        InvokeAsync(StateHasChanged);
    }

    private async void OnNewOrder(OrderDto order)
    {
        await InvokeAsync(async () =>
        {
            DashboardService.InvalidateCache();
            await LoadDashboardData();
            await JSRuntime.InvokeVoidAsync("blazorDashboard.showToast", $"New order #{order.Id} received", "info");
            await JSRuntime.InvokeVoidAsync("blazorDashboard.announceUpdate", $"New order received from {order.CustomerName}");
        });
    }

    private async void OnOrderUpdated(OrderDto order)
    {
        await InvokeAsync(async () =>
        {
            DashboardService.InvalidateCache();
            await LoadDashboardData();
            await JSRuntime.InvokeVoidAsync("blazorDashboard.announceUpdate", $"Order #{order.Id} status updated to {order.Status}");
        });
    }

    public void Dispose()
    {
        // Cleanup timer
        refreshTimer?.Dispose();

        // Cleanup event handlers
        AuthService.OnAuthenticationStateChanged -= OnAuthenticationStateChanged;

        if (SignalRService != null)
        {
            SignalRService.NewOrder -= OnNewOrder;
            SignalRService.OrderUpdated -= OnOrderUpdated;
        }
    }
}