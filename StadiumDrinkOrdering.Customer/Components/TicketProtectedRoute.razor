@using StadiumDrinkOrdering.Customer.Services
@using StadiumDrinkOrdering.Shared.DTOs
@inject IApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="ticket-protected-route">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner">
                <div class="spinner"></div>
            </div>
            <h3>Verifying Access...</h3>
            <p>Please wait while we verify your ticket session</p>
        </div>
    }
    else if (isAccessDenied)
    {
        <div class="access-denied-container">
            <div class="access-denied-icon">üö´</div>
            <h2>Access Denied</h2>
            <p>@errorMessage</p>
            <div class="action-buttons">
                <button class="btn btn-primary" @onclick="RedirectToScanner">
                    üì± Scan Your Ticket
                </button>
                <button class="btn btn-secondary" @onclick="GoHome">
                    üè† Go Home
                </button>
            </div>
        </div>
    }
    else
    {
        @ChildContent
    }
</div>

<style>
    .ticket-protected-route {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .loading-container,
    .access-denied-container {
        text-align: center;
        padding: 40px;
        max-width: 400px;
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 15px;
        color: white;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    .loading-spinner {
        margin-bottom: 20px;
    }

    .spinner {
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top: 4px solid #fff;
        width: 60px;
        height: 60px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    .access-denied-icon {
        font-size: 4rem;
        margin-bottom: 20px;
    }

    .action-buttons {
        margin-top: 30px;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1rem;
        text-decoration: none;
        display: inline-block;
    }

    .btn-primary {
        background: #ff6b6b;
        color: white;
    }

    .btn-primary:hover {
        background: #ee5a5a;
        transform: translateY(-2px);
    }

    .btn-secondary {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .btn-secondary:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-2px);
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Mobile Optimizations */
    @@media (max-width: 768px) {
        .loading-container,
        .access-denied-container {
            margin: 20px;
            padding: 30px 20px;
        }
    }
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? RequiredSessionToken { get; set; }
    
    private bool isLoading = true;
    private bool isAccessDenied = false;
    private string errorMessage = string.Empty;
    private TicketSessionDto? currentSession = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ValidateTicketAccess();
        }
    }

    private async Task ValidateTicketAccess()
    {
        try
        {
            isLoading = true;
            isAccessDenied = false;
            StateHasChanged();

            string? sessionToken = RequiredSessionToken;
            
            // If no session token provided, try to get from session storage
            if (string.IsNullOrEmpty(sessionToken))
            {
                try
                {
                    sessionToken = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "ticketSessionToken");
                }
                catch (Exception)
                {
                    // JS runtime not available or other error
                }
            }

            if (string.IsNullOrEmpty(sessionToken))
            {
                isAccessDenied = true;
                errorMessage = "No active ticket session found. Please scan your ticket to access the ordering system.";
                return;
            }

            // Validate session with the API
            currentSession = await ApiService.GetTicketSessionAsync(sessionToken);
            
            if (currentSession == null || !currentSession.IsActive)
            {
                isAccessDenied = true;
                errorMessage = currentSession == null ? 
                    "Invalid or expired session. Please scan your ticket again." :
                    "Your session has expired. Please scan your ticket again.";
                
                // Clear invalid session from storage
                try
                {
                    await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "ticketSessionToken");
                }
                catch (Exception) { }
                
                return;
            }

            // Check if session is about to expire (within 5 minutes)
            if (currentSession.ExpiresAt <= DateTime.UtcNow.AddMinutes(5))
            {
                isAccessDenied = true;
                errorMessage = "Your ticket session is about to expire. Please scan your ticket again to continue ordering.";
                return;
            }

            // Access granted - session is valid
            isLoading = false;
            isAccessDenied = false;
        }
        catch (Exception ex)
        {
            isAccessDenied = true;
            errorMessage = "Unable to verify your ticket session. Please try scanning your ticket again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void RedirectToScanner()
    {
        Navigation.NavigateTo("/scan");
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }

    // Public method to get current session info
    public TicketSessionDto? GetCurrentSession()
    {
        return currentSession;
    }

    // Public method to refresh session validation
    public async Task RefreshSession()
    {
        await ValidateTicketAccess();
    }
}