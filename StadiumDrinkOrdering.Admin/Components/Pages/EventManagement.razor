@page "/events"
@page "/events/management"
@using StadiumDrinkOrdering.Admin.Services
@using StadiumDrinkOrdering.Shared.Models
@using StadiumDrinkOrdering.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject IAdminApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<EventManagement> Logger
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Event Management - Stadium Admin</PageTitle>

<div class="event-management-container">
    <!-- Header with Quick Actions -->
    <div class="management-header">
        <div class="header-content">
            <div class="header-left">
                <h1>🎪 Event Management</h1>
                <p>Manage stadium events, ticket sales, and analytics</p>
            </div>
            <div class="header-actions">
                <button class="btn btn-success" @onclick="ShowCreateEventModal" id="admin-events-create-btn">
                    ➕ Create New Event
                </button>
                <button class="btn btn-primary" @onclick="GenerateDemoData" id="admin-events-demo-data-btn">
                    🎲 Generate Demo Data
                </button>
                <button class="btn btn-secondary" @onclick="RefreshEvents" id="admin-events-refresh-btn">
                    🔄 Refresh
                </button>
            </div>
        </div>
        
        <!-- Quick Stats -->
        <div class="quick-stats">
            <div class="stat-card">
                <div class="stat-icon">🎫</div>
                <div class="stat-content">
                    <div class="stat-number">@(events?.Count ?? 0)</div>
                    <div class="stat-label">Total Events</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">🟢</div>
                <div class="stat-content">
                    <div class="stat-number">@(events?.Count(e => e.IsActive) ?? 0)</div>
                    <div class="stat-label">Active Events</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">📈</div>
                <div class="stat-content">
                    <div class="stat-number">€@totalRevenue.ToString("N0")</div>
                    <div class="stat-label">Total Revenue</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">🎯</div>
                <div class="stat-content">
                    <div class="stat-number">@totalTicketsSold</div>
                    <div class="stat-label">Tickets Sold</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter and View Controls -->
    <div class="view-controls">
        <div class="filter-section">
            <div class="filter-group">
                <label>Event Type:</label>
                <select @bind="selectedEventType" @bind:after="FilterEvents" class="filter-select">
                    <option value="">All Types</option>
                    <option value="Football">Football</option>
                    <option value="Concert">Concert</option>
                    <option value="Basketball">Basketball</option>
                    <option value="Boxing">Boxing</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            <div class="filter-group">
                <label>Status:</label>
                <select @bind="selectedStatus" @bind:after="FilterEvents" class="filter-select">
                    <option value="">All Status</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="upcoming">Upcoming</option>
                    <option value="past">Past</option>
                </select>
            </div>
            <div class="search-group">
                <input @bind="searchQuery" @onkeyup="FilterEvents" placeholder="Search events..." class="search-input" />
                <button class="search-btn" id="admin-events-search-btn">🔍</button>
            </div>
        </div>
        
        <div class="view-toggles">
            <button class="view-btn @(viewMode == "grid" ? "active" : "")" @onclick="SetGridView" id="admin-events-grid-view-btn">
                📋 Grid
            </button>
            <button class="view-btn @(viewMode == "calendar" ? "active" : "")" @onclick="SetCalendarView" id="admin-events-calendar-view-btn">
                📅 Calendar
            </button>
        </div>
    </div>

    <!-- Events Display -->
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner">
                <div class="spinner"></div>
            </div>
            <h3>Loading Events...</h3>
        </div>
    }
    else if (viewMode == "grid")
    {
        <div class="events-grid">
            @foreach (var eventItem in filteredEvents)
            {
                <div class="event-card @(eventItem.IsActive ? "active" : "inactive")" @onclick="() => ShowEventDetails(eventItem)">
                    <div class="event-header">
                        <div class="event-type-badge @eventItem.EventType.ToLower()">
                            @GetEventTypeIcon(eventItem.EventType) @eventItem.EventType
                        </div>
                        <div class="event-status">
                            @if (eventItem.IsActive)
                            {
                                <span class="status-active">🟢 Active</span>
                            }
                            else
                            {
                                <span class="status-inactive">🔴 Inactive</span>
                            }
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(eventItem.ImageUrl))
                    {
                        <div class="event-image">
                            <img src="@eventItem.ImageUrl" alt="@eventItem.EventName" />
                        </div>
                    }
                    else
                    {
                        <div class="event-image-placeholder">
                            <div class="placeholder-icon">@GetEventTypeIcon(eventItem.EventType)</div>
                        </div>
                    }
                    
                    <div class="event-content">
                        <h3 class="event-name">@eventItem.EventName</h3>
                        <p class="event-description">@eventItem.Description</p>
                        
                        <div class="event-details">
                            <div class="detail-item">
                                <span class="detail-icon">📅</span>
                                <span class="detail-text">@eventItem.EventDate.ToString("MMM dd, yyyy")</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-icon">⏰</span>
                                <span class="detail-text">@eventItem.EventDate.ToString("h:mm tt")</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-icon">🎫</span>
                                <span class="detail-text">@eventItem.TotalSeats seats</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-icon">🎟️</span>
                                <span class="detail-text">@(eventItem.Tickets?.Count ?? 0) sold</span>
                            </div>
                            @if (eventItem.BaseTicketPrice.HasValue)
                            {
                                <div class="detail-item">
                                    <span class="detail-icon">💰</span>
                                    <span class="detail-text">€@eventItem.BaseTicketPrice.Value.ToString("F2")</span>
                                </div>
                            }
                        </div>
                        
                        @if (eventItem.Analytics != null)
                        {
                            <div class="event-analytics">
                                <div class="analytics-item">
                                    <div class="analytics-number">@eventItem.Analytics.TotalTicketsSold</div>
                                    <div class="analytics-label">Tickets Sold</div>
                                </div>
                                <div class="analytics-item">
                                    <div class="analytics-number">€@eventItem.Analytics.TicketRevenue.ToString("N0")</div>
                                    <div class="analytics-label">Ticket Revenue</div>
                                </div>
                                <div class="analytics-item">
                                    <div class="analytics-number">€@eventItem.Analytics.DrinksRevenue.ToString("N0")</div>
                                    <div class="analytics-label">Drinks Revenue</div>
                                </div>
                                <div class="analytics-item">
                                    <div class="analytics-number">€@eventItem.Analytics.TotalRevenue.ToString("N0")</div>
                                    <div class="analytics-label">Total Revenue</div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <div class="event-actions">
                        <button class="btn btn-primary btn-sm" @onclick:stopPropagation="true" @onclick="() => ShowEventDetails(eventItem)" id="admin-events-view-details-@eventItem.Id-btn">
                            📊 View Details
                        </button>
                        <button class="btn btn-secondary btn-sm" @onclick:stopPropagation="true" @onclick="() => EditEvent(eventItem)" id="admin-events-edit-@eventItem.Id-btn">
                            ✏️ Edit
                        </button>
                        @if (eventItem.IsActive)
                        {
                            <button class="btn btn-warning btn-sm" @onclick:stopPropagation="true" @onclick="() => DeactivateEvent(eventItem)" id="admin-events-deactivate-@eventItem.Id-btn">
                                ⏸️ Deactivate
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-success btn-sm" @onclick:stopPropagation="true" @onclick="() => ActivateEvent(eventItem)" id="admin-events-activate-@eventItem.Id-btn">
                                ▶️ Activate
                            </button>
                        }
                    </div>
                </div>
            }
            
            @if (!filteredEvents.Any())
            {
                <div class="empty-state">
                    <div class="empty-icon">🎪</div>
                    <h3>No Events Found</h3>
                    <p>@(events?.Any() == true ? "Try adjusting your filters" : "Create your first event to get started")</p>
                    @if (events?.Any() != true)
                    {
                        <button class="btn btn-primary" @onclick="ShowCreateEventModal" id="admin-events-create-first-btn">
                            Create First Event
                        </button>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <!-- Calendar View -->
        <div class="calendar-container">
            <div class="calendar-header">
                <button class="calendar-nav" @onclick="PreviousMonth" id="admin-events-prev-month-btn">‹</button>
                <h2>@currentCalendarDate.ToString("MMMM yyyy")</h2>
                <button class="calendar-nav" @onclick="NextMonth" id="admin-events-next-month-btn">›</button>
            </div>
            
            <div class="calendar-grid">
                <div class="calendar-days-header">
                    <div class="day-header">Sun</div>
                    <div class="day-header">Mon</div>
                    <div class="day-header">Tue</div>
                    <div class="day-header">Wed</div>
                    <div class="day-header">Thu</div>
                    <div class="day-header">Fri</div>
                    <div class="day-header">Sat</div>
                </div>
                
                <div class="calendar-days">
                    @foreach (var day in GetCalendarDays())
                    {
                        <div class="calendar-day @(day.IsCurrentMonth ? "current-month" : "other-month") @(day.IsToday ? "today" : "")">
                            <div class="day-number">@day.Date.Day</div>
                            @foreach (var eventItem in day.Events)
                            {
                                <div class="calendar-event @eventItem.EventType.ToLower()" @onclick="() => ShowEventDetails(eventItem)">
                                    <div class="event-time">@eventItem.EventDate.ToString("HH:mm")</div>
                                    <div class="event-title">@eventItem.EventName</div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<!-- Create/Edit Event Modal -->
@if (showEventModal)
{
    <div class="modal-overlay" @onclick="CloseEventModal">
        <div class="event-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>@(editingEvent == null ? "Create New Event" : "Edit Event")</h3>
                <button class="btn-close" @onclick="CloseEventModal" id="admin-events-modal-close-btn">✕</button>
            </div>
            
            <div class="modal-content">
                <form @onsubmit="SaveEvent" @onsubmit:preventDefault="true">
                    <div class="form-grid">
                        <div class="form-group">
                            <label>Event Name *</label>
                            <input @bind="eventForm.EventName" class="form-control" required maxlength="200" />
                        </div>
                        
                        <div class="form-group">
                            <label>Event Type *</label>
                            <select @bind="eventForm.EventType" class="form-control" required>
                                <option value="">Select Type</option>
                                <option value="Football">Football</option>
                                <option value="Concert">Concert</option>
                                <option value="Basketball">Basketball</option>
                                <option value="Baseball">Baseball</option>
                                <option value="Hockey">Hockey</option>
                                <option value="Boxing">Boxing</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Event Date *</label>
                            <input @bind="eventForm.EventDate" type="datetime-local" class="form-control" required />
                        </div>
                        
                        <div class="form-group">
                            <label>Total Seats *</label>
                            <input @bind="eventForm.TotalSeats" type="number" class="form-control" min="1" max="100000" required />
                        </div>
                        
                        <div class="form-group">
                            <label>Base Ticket Price</label>
                            <input @bind="eventForm.BaseTicketPrice" type="number" step="0.01" min="0" class="form-control" />
                        </div>
                        
                        <div class="form-group">
                            <label>Image URL</label>
                            <input @bind="eventForm.ImageUrl" class="form-control" maxlength="500" />
                        </div>
                    </div>
                    
                    <div class="form-group full-width">
                        <label>Description</label>
                        <textarea @bind="eventForm.Description" class="form-control" rows="3" maxlength="1000"></textarea>
                    </div>
                    
                    <div class="modal-actions">
                        <button type="button" class="btn btn-secondary" @onclick="CloseEventModal" id="admin-events-modal-cancel-btn">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving" id="admin-events-modal-save-btn">
                            @if (isSaving)
                            {
                                <span>💾 Saving...</span>
                            }
                            else
                            {
                                <span>@(editingEvent == null ? "Create Event" : "Update Event")</span>
                            }
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

<!-- Event Details Modal -->
@if (selectedEvent != null && showDetailsModal)
{
    <div class="modal-overlay" @onclick="CloseDetailsModal">
        <div class="details-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <div class="header-info">
                    <h3>@selectedEvent.EventName</h3>
                    <div class="event-meta">
                        <span class="event-type-badge @selectedEvent.EventType.ToLower()">
                            @GetEventTypeIcon(selectedEvent.EventType) @selectedEvent.EventType
                        </span>
                        <span class="event-date">
                            📅 @selectedEvent.EventDate.ToString("MMM dd, yyyy • h:mm tt")
                        </span>
                    </div>
                </div>
                <button class="btn-close" @onclick="CloseDetailsModal" id="admin-events-details-close-btn">✕</button>
            </div>
            
            <div class="modal-content">
                <div class="details-grid">
                    <!-- Event Information -->
                    <div class="details-section">
                        <h4>Event Information</h4>
                        <div class="info-card">
                            @if (!string.IsNullOrEmpty(selectedEvent.ImageUrl))
                            {
                                <img src="@selectedEvent.ImageUrl" alt="@selectedEvent.EventName" class="event-detail-image" />
                            }
                            <div class="info-content">
                                <p><strong>Description:</strong> @(selectedEvent.Description ?? "No description provided")</p>
                                <p><strong>Total Seats:</strong> @selectedEvent.TotalSeats.ToString("N0")</p>
                                @if (selectedEvent.BaseTicketPrice.HasValue)
                                {
                                    <p><strong>Base Price:</strong> €@selectedEvent.BaseTicketPrice.Value.ToString("F2")</p>
                                }
                                <p><strong>Status:</strong> @(selectedEvent.IsActive ? "🟢 Active" : "🔴 Inactive")</p>
                                <p><strong>Created:</strong> @selectedEvent.CreatedAt.ToString("MMM dd, yyyy • h:mm tt")</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Analytics -->
                    @if (selectedEvent.Analytics != null)
                    {
                        <div class="details-section">
                            <h4>Analytics</h4>
                            <div class="analytics-grid">
                                <div class="analytics-card">
                                    <div class="analytics-icon">🎫</div>
                                    <div class="analytics-content">
                                        <div class="analytics-number">@selectedEvent.Analytics.TotalTicketsSold</div>
                                        <div class="analytics-label">Tickets Sold</div>
                                        <div class="analytics-percent">
                                            @(selectedEvent.TotalSeats > 0 ? $"{(selectedEvent.Analytics.TotalTicketsSold * 100.0 / selectedEvent.TotalSeats):F1}%" : "0%")
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="analytics-card">
                                    <div class="analytics-icon">🛒</div>
                                    <div class="analytics-content">
                                        <div class="analytics-number">@selectedEvent.Analytics.TotalOrders</div>
                                        <div class="analytics-label">Total Orders</div>
                                        <div class="analytics-percent">
                                            @(selectedEvent.Analytics.TotalTicketsSold > 0 ? $"{(selectedEvent.Analytics.TotalOrders * 100.0 / selectedEvent.Analytics.TotalTicketsSold):F1}%" : "0%") order rate
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="analytics-card">
                                    <div class="analytics-icon">💰</div>
                                    <div class="analytics-content">
                                        <div class="analytics-number">€@selectedEvent.Analytics.TotalRevenue.ToString("N0")</div>
                                        <div class="analytics-label">Total Revenue</div>
                                        <div class="analytics-percent">
                                            €@selectedEvent.Analytics.AverageOrderValue.ToString("F2") avg order
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="analytics-card">
                                    <div class="analytics-icon">🍻</div>
                                    <div class="analytics-content">
                                        <div class="analytics-number">@selectedEvent.Analytics.TotalDrinksSold</div>
                                        <div class="analytics-label">Drinks Sold</div>
                                        @if (!string.IsNullOrEmpty(selectedEvent.Analytics.MostPopularDrink))
                                        {
                                            <div class="analytics-percent">
                                                🔥 @selectedEvent.Analytics.MostPopularDrink
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                            
                            @if (selectedEvent.Analytics.PeakOrderTime.HasValue)
                            {
                                <div class="peak-time-info">
                                    <strong>Peak Order Time:</strong> @selectedEvent.Analytics.PeakOrderTime.Value.ToString("h:mm tt")
                                </div>
                            }
                        </div>
                    }
                </div>
                
                <div class="modal-actions">
                    <button class="btn btn-primary" @onclick="() => EditEvent(selectedEvent)" id="admin-events-details-edit-btn">
                        ✏️ Edit Event
                    </button>
                    <button class="btn btn-success" @onclick="() => ViewEventOrders(selectedEvent)" id="admin-events-details-orders-btn">
                        📋 View Orders
                    </button>
                    <button class="btn btn-info" @onclick="() => ViewEventTickets(selectedEvent)" id="admin-events-details-tickets-btn">
                        🎫 View Tickets
                    </button>
                    @if (selectedEvent.IsActive)
                    {
                        <button class="btn btn-warning" @onclick="() => DeactivateEvent(selectedEvent)" id="admin-events-details-deactivate-btn">
                            ⏸️ Deactivate
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-success" @onclick="() => ActivateEvent(selectedEvent)" id="admin-events-details-activate-btn">
                            ▶️ Activate
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (showToast)
{
    <div class="toast @toastType">
        <div class="toast-content">
            <span>@toastMessage</span>
            <button class="toast-close" @onclick="HideToast" id="admin-events-toast-close-btn">×</button>
        </div>
    </div>
}

<style>
    .event-management-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
    }

    /* Header Styles */
    .management-header {
        background: white;
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 20px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 25px;
    }

    .header-left h1 {
        margin: 0 0 8px 0;
        font-size: 2.2rem;
        color: #333;
        background: linear-gradient(45deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .header-left p {
        margin: 0;
        color: #666;
        font-size: 1.1rem;
    }

    .header-actions {
        display: flex;
        gap: 12px;
    }

    .quick-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
    }

    .stat-card {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 20px;
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-radius: 12px;
        border-left: 4px solid #007bff;
        transition: all 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }

    .stat-icon {
        font-size: 2.5rem;
        opacity: 0.8;
    }

    .stat-content {
        flex: 1;
    }

    .stat-number {
        font-size: 1.8rem;
        font-weight: bold;
        color: #333;
        line-height: 1;
        margin-bottom: 4px;
    }

    .stat-label {
        color: #666;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* View Controls */
    .view-controls {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 4px 20px rgba(0,0,0,0.05);
    }

    .filter-section {
        display: flex;
        gap: 20px;
        align-items: center;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .filter-group label {
        font-size: 0.8rem;
        color: #666;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .filter-select, .search-input {
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 0.9rem;
        background: white;
        transition: all 0.3s ease;
    }

    .filter-select:focus, .search-input:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
    }

    .search-group {
        display: flex;
        align-items: end;
        gap: 8px;
    }

    .search-input {
        width: 200px;
    }

    .search-btn {
        padding: 8px 12px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .search-btn:hover {
        background: #0056b3;
    }

    .view-toggles {
        display: flex;
        gap: 8px;
    }

    .view-btn {
        padding: 10px 16px;
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .view-btn.active {
        background: #007bff;
        color: white;
        border-color: #007bff;
    }

    .view-btn:hover:not(.active) {
        border-color: #007bff;
        background: rgba(0,123,255,0.1);
    }

    /* Events Grid */
    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 20px;
    }

    .event-card {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        cursor: pointer;
        border: 2px solid transparent;
    }

    .event-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 40px rgba(0,0,0,0.15);
        border-color: rgba(0,123,255,0.3);
    }

    .event-card.active {
        border-left: 4px solid #28a745;
    }

    .event-card.inactive {
        border-left: 4px solid #dc3545;
        opacity: 0.8;
    }

    .event-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background: linear-gradient(45deg, #f8f9fa, #e9ecef);
    }

    .event-type-badge {
        padding: 6px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: bold;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .event-type-badge.football { background: #28a745; color: white; }
    .event-type-badge.concert { background: #e83e8c; color: white; }
    .event-type-badge.basketball { background: #fd7e14; color: white; }
    .event-type-badge.boxing { background: #dc3545; color: white; }
    .event-type-badge.other { background: #6c757d; color: white; }

    .event-status {
        font-size: 0.8rem;
        font-weight: bold;
    }

    .status-active { color: #28a745; }
    .status-inactive { color: #dc3545; }

    .event-image, .event-image-placeholder {
        height: 200px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(45deg, #f8f9fa, #e9ecef);
    }

    .event-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .placeholder-icon {
        font-size: 4rem;
        opacity: 0.5;
    }

    .event-content {
        padding: 20px;
    }

    .event-name {
        margin: 0 0 8px 0;
        font-size: 1.3rem;
        color: #333;
        line-height: 1.3;
    }

    .event-description {
        margin: 0 0 15px 0;
        color: #666;
        font-size: 0.9rem;
        line-height: 1.4;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .event-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 8px;
        margin-bottom: 15px;
    }

    .detail-item {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 0.85rem;
        color: #666;
    }

    .detail-icon {
        opacity: 0.7;
    }

    .event-analytics {
        display: flex;
        justify-content: space-between;
        background: #f8f9fa;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 15px;
    }

    .analytics-item {
        text-align: center;
        flex: 1;
    }

    .analytics-number {
        font-weight: bold;
        color: #333;
        font-size: 1rem;
        line-height: 1;
    }

    .analytics-label {
        font-size: 0.7rem;
        color: #666;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-top: 2px;
    }

    .event-actions {
        display: flex;
        gap: 8px;
        padding: 0 20px 20px 20px;
        justify-content: space-between;
    }

    /* Calendar View */
    .calendar-container {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
    }

    .calendar-header h2 {
        margin: 0;
        font-size: 1.5rem;
    }

    .calendar-nav {
        background: rgba(255,255,255,0.2);
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1.2rem;
        transition: background 0.3s ease;
    }

    .calendar-nav:hover {
        background: rgba(255,255,255,0.3);
    }

    .calendar-grid {
        padding: 20px;
    }

    .calendar-days-header {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 1px;
        margin-bottom: 10px;
    }

    .day-header {
        padding: 12px 8px;
        text-align: center;
        font-weight: bold;
        color: #666;
        text-transform: uppercase;
        font-size: 0.8rem;
        letter-spacing: 0.5px;
    }

    .calendar-days {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 1px;
        background: #eee;
    }

    .calendar-day {
        background: white;
        min-height: 120px;
        padding: 8px;
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .calendar-day.other-month {
        background: #f8f9fa;
        opacity: 0.5;
    }

    .calendar-day.today {
        background: rgba(0,123,255,0.1);
        border: 2px solid #007bff;
    }

    .day-number {
        font-weight: bold;
        color: #333;
        font-size: 0.9rem;
        line-height: 1;
        margin-bottom: 4px;
    }

    .calendar-event {
        background: #007bff;
        color: white;
        padding: 4px 6px;
        border-radius: 4px;
        font-size: 0.7rem;
        cursor: pointer;
        line-height: 1.2;
    }

    .calendar-event.football { background: #28a745; }
    .calendar-event.concert { background: #e83e8c; }
    .calendar-event.basketball { background: #fd7e14; }
    .calendar-event.boxing { background: #dc3545; }

    .event-time {
        font-weight: bold;
        opacity: 0.9;
    }

    .event-title {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Empty State */
    .empty-state {
        grid-column: 1 / -1;
        text-align: center;
        padding: 60px 20px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.05);
    }

    .empty-icon {
        font-size: 4rem;
        margin-bottom: 20px;
        opacity: 0.7;
    }

    .empty-state h3 {
        margin: 0 0 10px 0;
        color: #333;
        font-size: 1.5rem;
    }

    .empty-state p {
        margin: 0 0 20px 0;
        color: #666;
        font-size: 1rem;
    }

    /* Loading */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 400px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.05);
    }

    .loading-spinner {
        margin-bottom: 20px;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        padding: 20px;
    }

    .event-modal, .details-modal {
        background: white;
        border-radius: 15px;
        max-width: 800px;
        width: 100%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        padding: 25px;
        border-bottom: 1px solid #eee;
        background: linear-gradient(45deg, #f8f9fa, #e9ecef);
        border-radius: 15px 15px 0 0;
    }

    .header-info h3 {
        margin: 0 0 8px 0;
        font-size: 1.8rem;
        color: #333;
    }

    .event-meta {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .event-date {
        color: #666;
        font-size: 0.9rem;
    }

    .modal-content {
        padding: 25px;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .form-group.full-width {
        grid-column: 1 / -1;
    }

    .form-group label {
        font-weight: bold;
        color: #333;
        font-size: 0.9rem;
    }

    .form-control {
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
    }

    .details-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 25px;
        margin-bottom: 25px;
    }

    .details-section h4 {
        margin: 0 0 15px 0;
        color: #333;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .info-card {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        border-left: 4px solid #007bff;
    }

    .event-detail-image {
        width: 100%;
        height: 150px;
        object-fit: cover;
        border-radius: 8px;
        margin-bottom: 15px;
    }

    .info-content p {
        margin: 8px 0;
        color: #666;
    }

    .info-content strong {
        color: #333;
    }

    .analytics-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }

    .analytics-card {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        display: flex;
        align-items: center;
        gap: 12px;
        border-left: 4px solid #28a745;
    }

    .analytics-icon {
        font-size: 2rem;
        opacity: 0.8;
    }

    .analytics-content {
        flex: 1;
    }

    .analytics-number {
        font-size: 1.3rem;
        font-weight: bold;
        color: #333;
        line-height: 1;
        margin-bottom: 3px;
    }

    .analytics-label {
        font-size: 0.8rem;
        color: #666;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 3px;
    }

    .analytics-percent {
        font-size: 0.8rem;
        color: #007bff;
        font-weight: 500;
    }

    .peak-time-info {
        background: #e7f3ff;
        padding: 12px;
        border-radius: 8px;
        margin-top: 15px;
        color: #0066cc;
        font-size: 0.9rem;
        text-align: center;
    }

    .modal-actions {
        display: flex;
        justify-content: center;
        gap: 12px;
        padding-top: 20px;
        border-top: 1px solid #eee;
        flex-wrap: wrap;
    }

    /* Toast */
    .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1100;
        min-width: 300px;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        animation: slideInRight 0.3s ease-out;
    }

    .toast.success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
    .toast.error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
    .toast.warning { background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }

    .toast-content {
        padding: 15px 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 10px;
    }

    .toast-close {
        background: none;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: inherit;
        padding: 0;
    }

    @@keyframes slideInRight {
        from { transform: translateX(100%); }
        to { transform: translateX(0); }
    }

    /* Button Styles */
    .btn {
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        text-align: center;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 6px;
        font-size: 0.9rem;
        padding: 12px 20px;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
    }

    .btn-sm {
        padding: 6px 12px;
        font-size: 0.8rem;
    }

    .btn-primary {
        background: linear-gradient(45deg, #007bff, #0056b3);
        color: white;
        box-shadow: 0 2px 10px rgba(0,123,255,0.3);
    }

    .btn-primary:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 4px 20px rgba(0,123,255,0.4);
    }

    .btn-secondary {
        background: linear-gradient(45deg, #6c757d, #545b62);
        color: white;
        box-shadow: 0 2px 10px rgba(108,117,125,0.3);
    }

    .btn-secondary:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 4px 20px rgba(108,117,125,0.4);
    }

    .btn-success {
        background: linear-gradient(45deg, #28a745, #1e7e34);
        color: white;
        box-shadow: 0 2px 10px rgba(40,167,69,0.3);
    }

    .btn-success:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 4px 20px rgba(40,167,69,0.4);
    }

    .btn-warning {
        background: linear-gradient(45deg, #ffc107, #e0a800);
        color: #212529;
        box-shadow: 0 2px 10px rgba(255,193,7,0.3);
    }

    .btn-warning:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 4px 20px rgba(255,193,7,0.4);
    }

    .btn-info {
        background: linear-gradient(45deg, #17a2b8, #138496);
        color: white;
        box-shadow: 0 2px 10px rgba(23,162,184,0.3);
    }

    .btn-info:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 4px 20px rgba(23,162,184,0.4);
    }

    .btn-close {
        background: #f8f9fa;
        color: #666;
        border: 1px solid #ddd;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        padding: 0;
    }

    .btn-close:hover {
        background: #e9ecef;
        color: #333;
    }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .events-grid {
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        }
        
        .details-grid {
            grid-template-columns: 1fr;
        }
    }

    @@media (max-width: 768px) {
        .event-management-container {
            padding: 10px;
        }
        
        .header-content {
            flex-direction: column;
            gap: 15px;
            align-items: stretch;
        }
        
        .header-actions {
            justify-content: space-between;
        }
        
        .view-controls {
            flex-direction: column;
            gap: 15px;
            align-items: stretch;
        }
        
        .filter-section {
            flex-direction: column;
            gap: 10px;
        }
        
        .search-input {
            width: 100%;
        }
        
        .form-grid {
            grid-template-columns: 1fr;
        }
        
        .modal-actions {
            flex-direction: column;
        }
        
        .btn {
            width: 100%;
        }
        
        .quick-stats {
            grid-template-columns: repeat(2, 1fr);
        }
    }
</style>

@code {
    private List<Event> events = new();
    private List<Event> filteredEvents = new();
    private string selectedEventType = "";
    private string selectedStatus = "";
    private string searchQuery = "";
    private string viewMode = "grid";
    private DateTime currentCalendarDate = DateTime.Now;
    
    private bool showEventModal = false;
    private bool showDetailsModal = false;
    private bool isLoading = true;
    private bool isSaving = false;
    
    private Event? editingEvent = null;
    private Event? selectedEvent = null;
    private EventForm eventForm = new();
    
    private decimal totalRevenue = 0;
    private int totalTicketsSold = 0;
    
    private bool showToast = false;
    private string toastMessage = "";
    private string toastType = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            isLoading = true;
            events = await ApiService.GetEventsAsync() ?? new List<Event>();
            CalculateStats();
            FilterEvents();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load events");
            ShowToast("Failed to load events", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CalculateStats()
    {
        totalRevenue = (events ?? new List<Event>()).Where(e => e.Analytics != null).Sum(e => e.Analytics.TotalRevenue);
        totalTicketsSold = (events ?? new List<Event>()).Where(e => e.Analytics != null).Sum(e => e.Analytics.TotalTicketsSold);
    }

    private void FilterEvents()
    {
        filteredEvents = (events ?? new List<Event>()).Where(e =>
        {
            var matchesType = string.IsNullOrEmpty(selectedEventType) || e.EventType.Contains(selectedEventType, StringComparison.OrdinalIgnoreCase);
            
            var matchesStatus = selectedStatus switch
            {
                "active" => e.IsActive,
                "inactive" => !e.IsActive,
                "upcoming" => e.EventDate > DateTime.UtcNow,
                "past" => e.EventDate < DateTime.UtcNow,
                _ => true
            };
            
            var matchesSearch = string.IsNullOrEmpty(searchQuery) || 
                              e.EventName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                              (e.Description ?? "").Contains(searchQuery, StringComparison.OrdinalIgnoreCase);
            
            return matchesType && matchesStatus && matchesSearch;
        }).OrderByDescending(e => e.EventDate).ToList();
        
        StateHasChanged();
    }

    private void SetViewMode(string mode)
    {
        viewMode = mode;
        StateHasChanged();
    }

    private void SetGridView()
    {
        SetViewMode("grid");
    }

    private void SetCalendarView()
    {
        SetViewMode("calendar");
    }

    private void ShowCreateEventModal()
    {
        editingEvent = null;
        eventForm = new EventForm();
        showEventModal = true;
        StateHasChanged();
    }

    private void EditEvent(Event eventItem)
    {
        editingEvent = eventItem;
        eventForm = new EventForm
        {
            EventName = eventItem.EventName,
            EventType = eventItem.EventType,
            EventDate = eventItem.EventDate,
            TotalSeats = eventItem.TotalSeats,
            BaseTicketPrice = eventItem.BaseTicketPrice,
            ImageUrl = eventItem.ImageUrl,
            Description = eventItem.Description
        };
        showEventModal = true;
        if (showDetailsModal) showDetailsModal = false;
        StateHasChanged();
    }

    private void CloseEventModal()
    {
        showEventModal = false;
        editingEvent = null;
        StateHasChanged();
    }

    private async Task SaveEvent()
    {
        try
        {
            isSaving = true;
            StateHasChanged();

            if (editingEvent == null)
            {
                // Create new event
                var newEvent = new Event
                {
                    EventName = eventForm.EventName,
                    EventType = eventForm.EventType,
                    EventDate = eventForm.EventDate,
                    TotalSeats = eventForm.TotalSeats,
                    BaseTicketPrice = eventForm.BaseTicketPrice,
                    ImageUrl = eventForm.ImageUrl,
                    Description = eventForm.Description
                };

                await ApiService.CreateEventAsync(newEvent);
                ShowToast("Event created successfully!", "success");
            }
            else
            {
                // Update existing event
                editingEvent.EventName = eventForm.EventName;
                editingEvent.EventType = eventForm.EventType;
                editingEvent.EventDate = eventForm.EventDate;
                editingEvent.TotalSeats = eventForm.TotalSeats;
                editingEvent.BaseTicketPrice = eventForm.BaseTicketPrice;
                editingEvent.ImageUrl = eventForm.ImageUrl;
                editingEvent.Description = eventForm.Description;

                await ApiService.UpdateEventAsync(editingEvent.Id, editingEvent);
                ShowToast("Event updated successfully!", "success");
            }

            await LoadEvents();
            CloseEventModal();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save event");
            ShowToast("Failed to save event", "error");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowEventDetails(Event eventItem)
    {
        selectedEvent = eventItem;
        showDetailsModal = true;
        StateHasChanged();
    }

    private void CloseDetailsModal()
    {
        showDetailsModal = false;
        selectedEvent = null;
        StateHasChanged();
    }

    private async Task ActivateEvent(Event eventItem)
    {
        try
        {
            await ApiService.ActivateEventAsync(eventItem.Id);
            eventItem.IsActive = true;
            ShowToast($"{eventItem.EventName} activated!", "success");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to activate event {EventId}", eventItem.Id);
            ShowToast("Failed to activate event", "error");
        }
    }

    private async Task DeactivateEvent(Event eventItem)
    {
        try
        {
            await ApiService.DeactivateEventAsync(eventItem.Id);
            eventItem.IsActive = false;
            ShowToast($"{eventItem.EventName} deactivated!", "warning");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to deactivate event {EventId}", eventItem.Id);
            ShowToast("Failed to deactivate event", "error");
        }
    }

    private async Task GenerateDemoData()
    {
        try
        {
            // Ensure events are loaded
            await LoadEvents();
            
            if (events == null || !events.Any())
            {
                Logger.LogInformation("No events available. Creating demo events first...");
                
                // Create demo events first
                var demoEvents = new[]
                {
                    new Event 
                    { 
                        EventName = "Champions League Final", 
                        EventType = "Football", 
                        EventDate = DateTime.Today.AddDays(7).AddHours(20), 
                        TotalSeats = 65000, 
                        BaseTicketPrice = 150.00m, 
                        Description = "The ultimate football showdown",
                        IsActive = true
                    },
                    new Event 
                    { 
                        EventName = "Summer Music Festival", 
                        EventType = "Concert", 
                        EventDate = DateTime.Today.AddDays(14).AddHours(18), 
                        TotalSeats = 50000, 
                        BaseTicketPrice = 85.00m, 
                        Description = "Three days of amazing music",
                        IsActive = true
                    },
                    new Event 
                    { 
                        EventName = "NBA Finals Game 7", 
                        EventType = "Basketball", 
                        EventDate = DateTime.Today.AddDays(3).AddHours(19), 
                        TotalSeats = 20000, 
                        BaseTicketPrice = 200.00m, 
                        Description = "The decisive game of the championship",
                        IsActive = true
                    }
                };

                foreach (var evt in demoEvents)
                {
                    await ApiService.CreateEventAsync(evt);
                }
                
                ShowToast("Demo events created successfully! Generating demo data...", "success");
                await LoadEvents();
            }
            
            // Generate demo data for the first event or selected event
            if (selectedEvent != null)
            {
                await ApiService.GenerateDemoDataAsync(selectedEvent.Id);
                ShowToast($"Demo data generated for {selectedEvent.EventName}!", "success");
            }
            else if (events != null && events.Any())
            {
                await ApiService.GenerateDemoDataAsync(events.First().Id);
                ShowToast($"Demo data generated for {events.First().EventName}!", "success");
            }
            
            await LoadEvents();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to generate demo data");
            ShowToast($"Failed to generate demo data: {ex.Message}", "error");
        }
    }

    private async Task RefreshEvents()
    {
        await LoadEvents();
        ShowToast("Events refreshed!", "success");
    }

    private void ViewEventOrders(Event eventItem)
    {
        Navigation.NavigateTo($"/orders?eventId={eventItem.Id}");
    }

    private void ViewEventTickets(Event eventItem)
    {
        Navigation.NavigateTo($"/tickets?eventId={eventItem.Id}");
    }

    // Calendar methods
    private void PreviousMonth()
    {
        currentCalendarDate = currentCalendarDate.AddMonths(-1);
        StateHasChanged();
    }

    private void NextMonth()
    {
        currentCalendarDate = currentCalendarDate.AddMonths(1);
        StateHasChanged();
    }

    private List<CalendarDay> GetCalendarDays()
    {
        var days = new List<CalendarDay>();
        var firstDayOfMonth = new DateTime(currentCalendarDate.Year, currentCalendarDate.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
        
        // Add days from previous month to fill the week
        var startDate = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);
        
        // Add days until we have complete weeks
        var endDate = lastDayOfMonth;
        while ((endDate - startDate).Days % 7 != 6)
        {
            endDate = endDate.AddDays(1);
        }
        
        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            var eventsOnDate = events.Where(e => e.EventDate.Date == date.Date).ToList();
            days.Add(new CalendarDay
            {
                Date = date,
                IsCurrentMonth = date.Month == currentCalendarDate.Month,
                IsToday = date.Date == DateTime.Today,
                Events = eventsOnDate
            });
        }
        
        return days;
    }

    // Helper methods
    private string GetEventTypeIcon(string eventType)
    {
        return eventType.ToLower() switch
        {
            "football" => "⚽",
            "concert" => "🎵",
            "basketball" => "🏀",
            "boxing" => "🥊",
            "baseball" => "⚾",
            "hockey" => "🏒",
            _ => "🎪"
        };
    }

    private void ShowToast(string message, string type)
    {
        toastMessage = message;
        toastType = type;
        showToast = true;
        StateHasChanged();
        
        // Auto-hide after 3 seconds
        Task.Delay(3000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                showToast = false;
                StateHasChanged();
            });
        });
    }

    private void HideToast()
    {
        showToast = false;
        StateHasChanged();
    }

    // Event form model
    public class EventForm
    {
        public string EventName { get; set; } = "";
        public string EventType { get; set; } = "";
        public DateTime EventDate { get; set; } = DateTime.Now.AddDays(7);
        public int TotalSeats { get; set; } = 50000;
        public decimal? BaseTicketPrice { get; set; }
        public string? ImageUrl { get; set; }
        public string? Description { get; set; }
    }

    // Calendar day model
    public class CalendarDay
    {
        public DateTime Date { get; set; }
        public bool IsCurrentMonth { get; set; }
        public bool IsToday { get; set; }
        public List<Event> Events { get; set; } = new();
    }
}