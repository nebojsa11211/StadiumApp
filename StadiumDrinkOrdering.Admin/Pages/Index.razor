@page "/"
@using Microsoft.Extensions.Localization
@using StadiumDrinkOrdering.Shared.Models
@using StadiumDrinkOrdering.Admin.Services
@using System.Globalization
@inject IStringLocalizer<SharedResources> Localizer
@inject IAdminApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@Localizer["PageTitle"]</PageTitle>

<div class="container-fluid" id="admin-dashboard-container">
    <!-- Real-time Statistics Dashboard -->
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="mb-4">🏟️ Stadium Dashboard - @DateTime.Now.ToString("MMMM dd, yyyy")</h2>
        </div>
    </div>
    
    <!-- Key Metrics Row -->
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card border-primary h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-2">Today's Revenue</h6>
                            <h3 class="mb-0 text-primary">@(todayRevenue.ToString("C", CultureInfo.CurrentCulture))</h3>
                            <small class="@(revenueChange >= 0 ? "text-success" : "text-danger")">
                                <i class="bi @(revenueChange >= 0 ? "bi-arrow-up" : "bi-arrow-down")"></i> @revenueChange.ToString("F1")% from yesterday
                            </small>
                        </div>
                        <div class="text-primary opacity-50">
                            <i class="bi bi-cash-stack" style="font-size: 2.5rem;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card border-success h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-2">Active Orders</h6>
                            <h3 class="mb-0 text-success">@activeOrders</h3>
                            <small class="text-muted">@pendingOrders pending, @inPreparationOrders preparing</small>
                        </div>
                        <div class="text-success opacity-50">
                            <i class="bi bi-cart-check" style="font-size: 2.5rem;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card border-warning h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-2">Tickets Sold Today</h6>
                            <h3 class="mb-0 text-warning">@ticketsSoldToday</h3>
                            <small class="text-muted">@currentEventName</small>
                        </div>
                        <div class="text-warning opacity-50">
                            <i class="bi bi-ticket-perforated" style="font-size: 2.5rem;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card border-info h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-2">Online Users</h6>
                            <h3 class="mb-0 text-info">@onlineUsers</h3>
                            <small class="text-muted">@staffOnline staff, @customersOnline customers</small>
                        </div>
                        <div class="text-info opacity-50">
                            <i class="bi bi-people" style="font-size: 2.5rem;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Recent Activity & Quick Actions Row -->
    <div class="row mb-4">
        <!-- Recent Activity Feed -->
        <div class="col-lg-8 mb-3">
            <div class="card h-100">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">📊 Recent Activity</h5>
                    <button class="btn btn-sm btn-outline-primary" @onclick="RefreshActivity">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
                <div class="card-body" style="max-height: 400px; overflow-y: auto;">
                    @if (recentActivities.Any())
                    {
                        <div class="timeline">
                            @foreach (var activity in recentActivities)
                            {
                                <div class="timeline-item mb-3 pb-3 border-bottom">
                                    <div class="d-flex align-items-start">
                                        <div class="timeline-icon me-3">
                                            <i class="bi @GetActivityIcon(activity.Type) @GetActivityColor(activity.Type)"></i>
                                        </div>
                                        <div class="flex-grow-1">
                                            <div class="d-flex justify-content-between">
                                                <h6 class="mb-1">@activity.Title</h6>
                                                <small class="text-muted">@GetTimeAgo(activity.Timestamp)</small>
                                            </div>
                                            <p class="mb-0 text-muted small">@activity.Description</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center">No recent activity</p>
                    }
                </div>
            </div>
        </div>
        
        <!-- Quick Actions -->
        <div class="col-lg-4 mb-3">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">⚡ Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-primary text-start" @onclick="@(() => Navigation.NavigateTo("/orders"))">
                            <i class="bi bi-cart-plus me-2"></i> Process New Orders
                            @if (pendingOrders > 0)
                            {
                                <span class="badge bg-danger float-end">@pendingOrders</span>
                            }
                        </button>
                        <button class="btn btn-outline-success text-start" @onclick="@(() => Navigation.NavigateTo("/events"))">
                            <i class="bi bi-calendar-event me-2"></i> Manage Events
                        </button>
                        <button class="btn btn-outline-warning text-start" @onclick="@(() => Navigation.NavigateTo("/analytics"))">
                            <i class="bi bi-graph-up me-2"></i> View Analytics
                        </button>
                        <button class="btn btn-outline-info text-start" @onclick="@(() => Navigation.NavigateTo("/logs"))">
                            <i class="bi bi-file-text me-2"></i> System Logs
                            @if (recentErrors > 0)
                            {
                                <span class="badge bg-danger float-end">@recentErrors</span>
                            }
                        </button>
                        <button class="btn btn-outline-secondary text-start" @onclick="@(() => Navigation.NavigateTo("/users"))">
                            <i class="bi bi-person-plus me-2"></i> Add Staff Member
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container" id="admin-cards-container">
        <div class="row" id="admin-cards-row">
            <div class="col-md-4 mb-4" id="admin-orders-card-col">
                <div class="card text-center h-100" id="admin-orders-card">
                    <div class="card-body">
                        <div class="mb-3" id="admin-orders-icon">
                            <span style="font-size: 3rem;">📋</span>
                        </div>
                        <h5 class="card-title" id="admin-orders-title">@Localizer["OrderManagement"]</h5>
                        <p class="card-text" id="admin-orders-description">@Localizer["OrderManagementDesc"]</p>
                        <a href="/orders" class="btn btn-primary" id="admin-orders-btn">@Localizer["ViewOrders"]</a>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4 mb-4" id="admin-drinks-card-col">
                <div class="card text-center h-100" id="admin-drinks-card">
                    <div class="card-body">
                        <div class="mb-3" id="admin-drinks-icon">
                            <span style="font-size: 3rem;">🍺</span>
                        </div>
                        <h5 class="card-title" id="admin-drinks-title">@Localizer["DrinkCatalog"]</h5>
                        <p class="card-text" id="admin-drinks-description">@Localizer["DrinkCatalogDesc"]</p>
                        <a href="/drinks" class="btn btn-primary" id="admin-drinks-btn">@Localizer["ManageDrinksBtn"]</a>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4 mb-4" id="admin-analytics-card-col">
                <div class="card text-center h-100" id="admin-analytics-card">
                    <div class="card-body">
                        <div class="mb-3" id="admin-analytics-icon">
                            <span style="font-size: 3rem;">📊</span>
                        </div>
                        <h5 class="card-title" id="admin-analytics-title">@Localizer["Analytics"]</h5>
                        <p class="card-text" id="admin-analytics-description">@Localizer["AnalyticsDesc"]</p>
                        <a href="/analytics" class="btn btn-primary" id="admin-analytics-btn">@Localizer["ViewAnalytics"]</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Second Row of Management Cards -->
        <div class="row" id="admin-management-cards-row">
            <div class="col-md-4 mb-4" id="admin-users-card-col">
                <div class="card text-center h-100" id="admin-users-card">
                    <div class="card-body">
                        <div class="mb-3" id="admin-users-icon">
                            <span style="font-size: 3rem;">👥</span>
                        </div>
                        <h5 class="card-title" id="admin-users-title">@Localizer["UserManagement"]</h5>
                        <p class="card-text" id="admin-users-description">@Localizer["UserManagementDesc"]</p>
                        <a href="/users" class="btn btn-success" id="admin-users-btn">@Localizer["ManageUsers"]</a>
                    </div>
                </div>
            </div>

            <div class="col-md-4 mb-4" id="admin-bartender-card-col">
                <div class="card text-center h-100" id="admin-bartender-card">
                    <div class="card-body">
                        <div class="mb-3" id="admin-bartender-icon">
                            <span style="font-size: 3rem;">🍸</span>
                        </div>
                        <h5 class="card-title" id="admin-bartender-title">@Localizer["BartenderDashboard"]</h5>
                        <p class="card-text" id="admin-bartender-description">@Localizer["BartenderDashboardDesc"]</p>
                        <a href="/bartender" class="btn btn-warning" id="admin-bartender-btn">@Localizer["ViewDashboard"]</a>
                    </div>
                </div>
            </div>

            <div class="col-md-4 mb-4" id="admin-events-card-col">
                <div class="card text-center h-100" id="admin-events-card">
                    <div class="card-body">
                        <div class="mb-3" id="admin-events-icon">
                            <span style="font-size: 3rem;">🎫</span>
                        </div>
                        <h5 class="card-title" id="admin-events-title">@Localizer["EventsManagement"]</h5>
                        <p class="card-text" id="admin-events-description">@Localizer["EventsManagementDesc"]</p>
                        <a href="/events" class="btn btn-info" id="admin-events-btn">@Localizer["ManageEvents"]</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-5" id="admin-setup-guide-row">
            <div class="col-md-6 offset-md-3 text-center" id="admin-setup-guide-col">
                <h3 id="admin-setup-guide-title">@Localizer["QuickSetupGuide"]</h3>
                <ol class="list-unstyled" id="admin-setup-guide-list">
                    <li class="mb-3" id="admin-setup-step-1">
                        <span class="badge bg-primary rounded-circle me-3" id="admin-setup-badge-1">1</span>
                        @Localizer["SetupStep1"]
                    </li>
                    <li class="mb-3" id="admin-setup-step-2">
                        <span class="badge bg-primary rounded-circle me-3" id="admin-setup-badge-2">2</span>
                        @Localizer["SetupStep2"]
                    </li>
                    <li class="mb-3" id="admin-setup-step-3">
                        <span class="badge bg-primary rounded-circle me-3" id="admin-setup-badge-3">3</span>
                        @Localizer["SetupStep3"]
                    </li>
                    <li class="mb-3" id="admin-setup-step-4">
                        <span class="badge bg-primary rounded-circle me-3" id="admin-setup-badge-4">4</span>
                        @Localizer["SetupStep4"]
                    </li>
                </ol>
            </div>
        </div>
    </div>
</div>

@code {
    // Statistics
    private decimal todayRevenue = 0;
    private decimal revenueChange = 0;
    private int activeOrders = 0;
    private int pendingOrders = 0;
    private int inPreparationOrders = 0;
    private int ticketsSoldToday = 0;
    private string currentEventName = "No active event";
    private int onlineUsers = 0;
    private int staffOnline = 0;
    private int customersOnline = 0;
    private int recentErrors = 0;
    
    // Recent activities
    private List<ActivityItem> recentActivities = new();
    
    private System.Threading.Timer? refreshTimer;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
        
        // Set up auto-refresh every 30 seconds
        refreshTimer = new System.Threading.Timer(
            async _ => await InvokeAsync(async () =>
            {
                await LoadDashboardData();
                StateHasChanged();
            }),
            null,
            TimeSpan.FromSeconds(30),
            TimeSpan.FromSeconds(30)
        );
    }
    
    private async Task LoadDashboardData()
    {
        try
        {
            // Load today's revenue
            var revenueData = await ApiService.GetAsync<RevenueData>("analytics/revenue/today");
            if (revenueData != null)
            {
                todayRevenue = revenueData.TodayRevenue;
                revenueChange = revenueData.ChangePercentage;
            }
            
            // Load order statistics
            var orderStats = await ApiService.GetAsync<OrderStatistics>("orders/statistics");
            if (orderStats != null)
            {
                activeOrders = orderStats.Active;
                pendingOrders = orderStats.Pending;
                inPreparationOrders = orderStats.InPreparation;
            }
            
            // Load ticket statistics
            var ticketStats = await ApiService.GetAsync<TicketStatistics>("tickets/statistics/today");
            if (ticketStats != null)
            {
                ticketsSoldToday = ticketStats.SoldToday;
                currentEventName = ticketStats.CurrentEventName ?? "No active event";
            }
            
            // Load user statistics
            var userStats = await ApiService.GetAsync<UserStatistics>("users/online-statistics");
            if (userStats != null)
            {
                onlineUsers = userStats.TotalOnline;
                staffOnline = userStats.StaffOnline;
                customersOnline = userStats.CustomersOnline;
            }
            
            // Load recent activity
            var activities = await ApiService.GetAsync<List<ActivityItem>>("logs/recent-activity?limit=10");
            if (activities != null)
            {
                recentActivities = activities;
            }
            
            // Load recent errors count
            var errorCount = await ApiService.GetAsync<int>("logs/recent-errors-count");
            recentErrors = errorCount;
        }
        catch (Exception ex)
        {
            // If API calls fail, use mock data for demonstration
            LoadMockData();
        }
    }
    
    private void LoadMockData()
    {
        // Mock data for demonstration
        todayRevenue = 12543.75m;
        revenueChange = 15.3m;
        activeOrders = 24;
        pendingOrders = 8;
        inPreparationOrders = 16;
        ticketsSoldToday = 342;
        currentEventName = "FC Stadium vs City United";
        onlineUsers = 156;
        staffOnline = 12;
        customersOnline = 144;
        recentErrors = 2;
        
        recentActivities = new List<ActivityItem>
        {
            new() { Type = "order", Title = "New Order #1247", Description = "Table A-15 ordered 3x Beer, 2x Soft Drink", Timestamp = DateTime.Now.AddMinutes(-2) },
            new() { Type = "ticket", Title = "Ticket Purchase", Description = "John Doe purchased 4 tickets for Section B", Timestamp = DateTime.Now.AddMinutes(-5) },
            new() { Type = "user", Title = "Staff Login", Description = "Bartender Mike logged in at Bar Station 3", Timestamp = DateTime.Now.AddMinutes(-8) },
            new() { Type = "system", Title = "Low Stock Alert", Description = "Beer inventory below threshold (20 units remaining)", Timestamp = DateTime.Now.AddMinutes(-15) },
            new() { Type = "order", Title = "Order Completed #1246", Description = "Delivered to Section C, Row 12", Timestamp = DateTime.Now.AddMinutes(-18) },
            new() { Type = "payment", Title = "Payment Processed", Description = "$125.50 processed via Credit Card", Timestamp = DateTime.Now.AddMinutes(-22) }
        };
    }
    
    private async Task RefreshActivity()
    {
        await LoadDashboardData();
    }
    
    private string GetActivityIcon(string type) => type.ToLower() switch
    {
        "order" => "bi-cart",
        "ticket" => "bi-ticket-perforated",
        "user" => "bi-person",
        "system" => "bi-gear",
        "payment" => "bi-credit-card",
        _ => "bi-circle"
    };
    
    private string GetActivityColor(string type) => type.ToLower() switch
    {
        "order" => "text-primary",
        "ticket" => "text-warning",
        "user" => "text-info",
        "system" => "text-danger",
        "payment" => "text-success",
        _ => "text-secondary"
    };
    
    private string GetTimeAgo(DateTime timestamp)
    {
        var diff = DateTime.Now - timestamp;
        if (diff.TotalMinutes < 1) return "just now";
        if (diff.TotalMinutes < 60) return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalHours < 24) return $"{(int)diff.TotalHours}h ago";
        return $"{(int)diff.TotalDays}d ago";
    }
    
    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
    
    // Data models
    private class ActivityItem
    {
        public string Type { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }
    
    private class RevenueData
    {
        public decimal TodayRevenue { get; set; }
        public decimal ChangePercentage { get; set; }
    }
    
    private class OrderStatistics
    {
        public int Active { get; set; }
        public int Pending { get; set; }
        public int InPreparation { get; set; }
    }
    
    private class TicketStatistics
    {
        public int SoldToday { get; set; }
        public string? CurrentEventName { get; set; }
    }
    
    private class UserStatistics
    {
        public int TotalOnline { get; set; }
        public int StaffOnline { get; set; }
        public int CustomersOnline { get; set; }
    }
}
